
InterfaceSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000001cc  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800120  00800120  00000280  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009cc  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000754  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000414  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001884  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040f  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b8  00000000  00000000  00001d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001f07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 32       	cpi	r26, 0x23	; 35
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  9e:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
void USART_Init(unsigned int ubrr){
	/*Set baud rate */
	/* UBRR0H contains the 4 most significant bits of the
	baud rate. UBRR0L contains the 8 least significant
	bits.*/  
	UBRR0H = (unsigned char)(ubrr>>8);
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	

	/*Enable transmitter and receiver */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	/* Set frame format: 8data */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  b4:	8e e0       	ldi	r24, 0x0E	; 14
  b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ba:	08 95       	ret

000000bc <USART_Transmit>:
}

void USART_Transmit(unsigned char data){
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	95 ff       	sbrs	r25, 5
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <USART_Transmit+0x4>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
  c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ca:	08 95       	ret

000000cc <USART_Receive>:
}

unsigned char USART_Receive(void){
	
	while(!(UCSR0A & (1<<RXC0)));
  cc:	e0 ec       	ldi	r30, 0xC0	; 192
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 23       	and	r24, r24
  d4:	ec f7       	brge	.-6      	; 0xd0 <USART_Receive+0x4>
	return UDR0;
  d6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
}
  da:	08 95       	ret

000000dc <USART_putstring>:

void USART_putstring(char* StringPtr){
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0){
  e2:	88 81       	ld	r24, Y
  e4:	88 23       	and	r24, r24
  e6:	31 f0       	breq	.+12     	; 0xf4 <USART_putstring+0x18>
  e8:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*StringPtr++);  
  ea:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
	
}

void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0){
  ee:	89 91       	ld	r24, Y+
  f0:	81 11       	cpse	r24, r1
  f2:	fb cf       	rjmp	.-10     	; 0xea <USART_putstring+0xe>
		USART_Transmit(*StringPtr++);  
	}
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <lcd_comando>:
	lcd_comando(0x06);
	lcd_comando(0x01);
}

void lcd_comando(char comando){
	PORTB = comando;
  fa:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(0x01);
  fc:	40 98       	cbi	0x08, 0	; 8
	PORTC &= ~(0x02);
  fe:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (0x04);
 100:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	83 ed       	ldi	r24, 0xD3	; 211
 104:	90 e3       	ldi	r25, 0x30	; 48
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_comando+0xc>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <lcd_comando+0x12>
 10c:	00 00       	nop
	_delay_ms(50);
	PORTC &= ~(0x04);
 10e:	42 98       	cbi	0x08, 2	; 8
 110:	08 95       	ret

00000112 <lcd_init>:
}

/* --------------------------------------------- LCD ------------------------------------------- */

void lcd_init(){
	lcd_comando(0x38);
 112:	88 e3       	ldi	r24, 0x38	; 56
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_comando>
	lcd_comando(0x0E);
 11a:	8e e0       	ldi	r24, 0x0E	; 14
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_comando>
	lcd_comando(0x06);
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_comando>
	lcd_comando(0x01);
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_comando>
 132:	08 95       	ret

00000134 <lcd_dado>:
	_delay_ms(50);
	PORTC &= ~(0x04);
}

void lcd_dado(char dado){
	PORTB = dado;
 134:	85 b9       	out	0x05, r24	; 5
	PORTC |= (0x01);
 136:	40 9a       	sbi	0x08, 0	; 8
	PORTC &= ~(0x02);
 138:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (0x04);
 13a:	42 9a       	sbi	0x08, 2	; 8
 13c:	83 ed       	ldi	r24, 0xD3	; 211
 13e:	90 e3       	ldi	r25, 0x30	; 48
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_dado+0xc>
 144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_dado+0x12>
 146:	00 00       	nop
	_delay_ms(50);
	PORTC &= ~(0x04);
 148:	42 98       	cbi	0x08, 2	; 8
 14a:	08 95       	ret

0000014c <lcd_print>:
	
}

int i;

void lcd_print (char *c){
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	ec 01       	movw	r28, r24
		while (*c != 0)         
 152:	88 81       	ld	r24, Y
 154:	88 23       	and	r24, r24
 156:	31 f0       	breq	.+12     	; 0x164 <lcd_print+0x18>
 158:	21 96       	adiw	r28, 0x01	; 1
			lcd_dado(*c++);     
 15a:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_dado>
}

int i;

void lcd_print (char *c){
		while (*c != 0)         
 15e:	89 91       	ld	r24, Y+
 160:	81 11       	cpse	r24, r1
 162:	fb cf       	rjmp	.-10     	; 0x15a <lcd_print+0xe>
			lcd_dado(*c++);     
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <main>:

char tx;

int main(void)
{
	DDRB = 0xff;
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x07;
 16e:	87 e0       	ldi	r24, 0x07	; 7
 170:	87 b9       	out	0x07, r24	; 7
	lcd_init();
 172:	0e 94 89 00 	call	0x112	; 0x112 <lcd_init>
	USART_Init(MYUBRR);
 176:	8f ec       	ldi	r24, 0xCF	; 207
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
    lcd_comando(0x80);
 17e:	80 e8       	ldi	r24, 0x80	; 128
 180:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_comando>
    lcd_print("Interface Serial");
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_print>
	USART_putstring("USART para LCD");
 18c:	81 e1       	ldi	r24, 0x11	; 17
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	0e 94 6e 00 	call	0xdc	; 0xdc <USART_putstring>
	USART_Transmit(0x0d);
 194:	8d e0       	ldi	r24, 0x0D	; 13
 196:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
    {		
		
		tx = USART_Receive();
		
		if((PIND&0x04) == 0){			
			tx = 'A';
 19a:	d1 e4       	ldi	r29, 0x41	; 65
		}

		if((PIND&0x08) == 0){
			tx = 'B';
 19c:	c2 e4       	ldi	r28, 0x42	; 66
	USART_Transmit(0x0d);
	
	while (1) 
    {		
		
		tx = USART_Receive();
 19e:	0e 94 66 00 	call	0xcc	; 0xcc <USART_Receive>
 1a2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <tx>
		
		if((PIND&0x04) == 0){			
 1a6:	4a 9b       	sbis	0x09, 2	; 9
			tx = 'A';
 1a8:	d0 93 22 01 	sts	0x0122, r29	; 0x800122 <tx>
		}

		if((PIND&0x08) == 0){
 1ac:	4b 9b       	sbis	0x09, 3	; 9
			tx = 'B';
 1ae:	c0 93 22 01 	sts	0x0122, r28	; 0x800122 <tx>
		}
		
		USART_Transmit(0x0d);
 1b2:	8d e0       	ldi	r24, 0x0D	; 13
 1b4:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
		lcd_comando(0xc0);
 1b8:	80 ec       	ldi	r24, 0xC0	; 192
 1ba:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_comando>
		lcd_dado(tx);
 1be:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <tx>
 1c2:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_dado>
    }
 1c6:	eb cf       	rjmp	.-42     	; 0x19e <main+0x34>

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
