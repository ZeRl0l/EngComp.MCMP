
InterfaceSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000260  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000098c  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075b  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043b  00000000  00000000  00001427  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00001864  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000430  00000000  00000000  000019d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000034e  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000214e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  88:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_Init>:
}

void lcd_print (char *c){
		while (*c != 0)         
			lcd_dado(*c++);     
}
  90:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  94:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  98:	e0 ec       	ldi	r30, 0xC0	; 192
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	80 83       	st	Z, r24
  a2:	e1 ec       	ldi	r30, 0xC1	; 193
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	88 61       	ori	r24, 0x18	; 24
  aa:	80 83       	st	Z, r24
  ac:	80 81       	ld	r24, Z
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	80 83       	st	Z, r24
  b2:	8c e2       	ldi	r24, 0x2C	; 44
  b4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  b8:	08 95       	ret

000000ba <lcd_comando>:
  ba:	85 b9       	out	0x05, r24	; 5
  bc:	40 98       	cbi	0x08, 0	; 8
  be:	41 98       	cbi	0x08, 1	; 8
  c0:	42 9a       	sbi	0x08, 2	; 8
  c2:	83 ed       	ldi	r24, 0xD3	; 211
  c4:	90 e3       	ldi	r25, 0x30	; 48
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lcd_comando+0xc>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <lcd_comando+0x12>
  cc:	00 00       	nop
  ce:	42 98       	cbi	0x08, 2	; 8
  d0:	08 95       	ret

000000d2 <lcd_init>:
  d2:	88 e3       	ldi	r24, 0x38	; 56
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 5d 00 	call	0xba	; 0xba <lcd_comando>
  da:	8e e0       	ldi	r24, 0x0E	; 14
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 5d 00 	call	0xba	; 0xba <lcd_comando>
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 5d 00 	call	0xba	; 0xba <lcd_comando>
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 5d 00 	call	0xba	; 0xba <lcd_comando>
  f2:	08 95       	ret

000000f4 <lcd_dado>:
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	40 9a       	sbi	0x08, 0	; 8
  f8:	41 98       	cbi	0x08, 1	; 8
  fa:	42 9a       	sbi	0x08, 2	; 8
  fc:	83 ed       	ldi	r24, 0xD3	; 211
  fe:	90 e3       	ldi	r25, 0x30	; 48
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_dado+0xc>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_dado+0x12>
 106:	00 00       	nop
 108:	42 98       	cbi	0x08, 2	; 8
 10a:	08 95       	ret

0000010c <__vector_18>:
/* --------------------------------------------------------------------------------------------- */

volatile char tx;

ISR(USART_RX_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
	tx = UDR0;
 12e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 132:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	lcd_dado(tx);
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 13a:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_dado>
}
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	bf 91       	pop	r27
 144:	af 91       	pop	r26
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	7f 91       	pop	r23
 14c:	6f 91       	pop	r22
 14e:	5f 91       	pop	r21
 150:	4f 91       	pop	r20
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <__vector_5>:

ISR(PCINT2_vect){
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	4f 93       	push	r20
 170:	5f 93       	push	r21
 172:	6f 93       	push	r22
 174:	7f 93       	push	r23
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	af 93       	push	r26
 17c:	bf 93       	push	r27
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
	if(!(PIND&(1<< 2))){
 182:	4a 99       	sbic	0x09, 2	; 9
 184:	03 c0       	rjmp	.+6      	; 0x18c <__vector_5+0x2c>
		lcd_dado('A');
 186:	81 e4       	ldi	r24, 0x41	; 65
 188:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_dado>
	}
	
	if(!(PIND&(1<< 3))){
 18c:	4b 99       	sbic	0x09, 3	; 9
 18e:	03 c0       	rjmp	.+6      	; 0x196 <__vector_5+0x36>
		lcd_dado('B');
 190:	82 e4       	ldi	r24, 0x42	; 66
 192:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_dado>
	}
}
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	bf 91       	pop	r27
 19c:	af 91       	pop	r26
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	7f 91       	pop	r23
 1a4:	6f 91       	pop	r22
 1a6:	5f 91       	pop	r21
 1a8:	4f 91       	pop	r20
 1aa:	3f 91       	pop	r19
 1ac:	2f 91       	pop	r18
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <main>:


int main(void)
{
	DDRD = 0x00;
 1b8:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x0c;
 1ba:	8c e0       	ldi	r24, 0x0C	; 12
 1bc:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0xff;
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x07;
 1c2:	97 e0       	ldi	r25, 0x07	; 7
 1c4:	97 b9       	out	0x07, r25	; 7
	PORTB = 0xff;
 1c6:	85 b9       	out	0x05, r24	; 5

	USART_Init(MYUBRR);
 1c8:	81 e2       	ldi	r24, 0x21	; 33
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 48 00 	call	0x90	; 0x90 <USART_Init>
	
	EICRA |= (1 << ISC01);
 1d0:	e9 e6       	ldi	r30, 0x69	; 105
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	82 60       	ori	r24, 0x02	; 2
 1d8:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0)|(1 << INT1);
 1da:	8d b3       	in	r24, 0x1d	; 29
 1dc:	83 60       	ori	r24, 0x03	; 3
 1de:	8d bb       	out	0x1d, r24	; 29
	
	sei();
 1e0:	78 94       	sei
	
	lcd_init();
 1e2:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_init>
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <main+0x2e>

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
