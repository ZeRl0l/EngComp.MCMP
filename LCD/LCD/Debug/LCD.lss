
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000019e  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b4c  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000757  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e0  00000000  00000000  0000157b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000195c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c2  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000341  00000000  00000000  00001d82  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000020c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  8e:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_action>:

void lcd_clear(){
	
	lcd_action(0x01);	//Limpa o LCD
	_delay_ms(2);		//Espera até limpar o LCD
	lcd_action(0x80);	//Move o cursor pra posição 1
  96:	9b b1       	in	r25, 0x0b	; 11
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	28 2f       	mov	r18, r24
  9c:	20 7f       	andi	r18, 0xF0	; 240
  9e:	92 2b       	or	r25, r18
  a0:	9b b9       	out	0x0b, r25	; 11
  a2:	58 98       	cbi	0x0b, 0	; 11
  a4:	59 9a       	sbi	0x0b, 1	; 11
  a6:	00 00       	nop
  a8:	59 98       	cbi	0x0b, 1	; 11
  aa:	32 e4       	ldi	r19, 0x42	; 66
  ac:	3a 95       	dec	r19
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_action+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <lcd_action+0x1c>
  b2:	2b b1       	in	r18, 0x0b	; 11
  b4:	2f 70       	andi	r18, 0x0F	; 15
  b6:	30 e1       	ldi	r19, 0x10	; 16
  b8:	83 9f       	mul	r24, r19
  ba:	c0 01       	movw	r24, r0
  bc:	11 24       	eor	r1, r1
  be:	82 2b       	or	r24, r18
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	59 9a       	sbi	0x0b, 1	; 11
  c4:	00 00       	nop
  c6:	59 98       	cbi	0x0b, 1	; 11
  c8:	83 ef       	ldi	r24, 0xF3	; 243
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_action+0x36>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_action+0x3c>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <lcd_init>:
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	8a b9       	out	0x0a, r24	; 10
  da:	85 ea       	ldi	r24, 0xA5	; 165
  dc:	9e e0       	ldi	r25, 0x0E	; 14
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_init+0x8>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_init+0xe>
  e4:	00 00       	nop
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_action>
  ee:	88 e2       	ldi	r24, 0x28	; 40
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_action>
  f6:	8c e0       	ldi	r24, 0x0C	; 12
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_action>
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_action>
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_action>
 10e:	83 ef       	ldi	r24, 0xF3	; 243
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_init+0x3c>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_init+0x42>
 118:	00 00       	nop
 11a:	08 95       	ret

0000011c <lcd_print>:
	
}

void lcd_print (char *str){
 11c:	fc 01       	movw	r30, r24
	
	int i;
	for(i=0; str[i]!=0; i++)
 11e:	90 81       	ld	r25, Z
 120:	99 23       	and	r25, r25
 122:	19 f1       	breq	.+70     	; 0x16a <lcd_print+0x4e>
	{
		LCD_Port = (LCD_Port & 0x0F) | (str[i] & 0xF0);
 124:	2b b1       	in	r18, 0x0b	; 11
 126:	2f 70       	andi	r18, 0x0F	; 15
 128:	90 7f       	andi	r25, 0xF0	; 240
 12a:	92 2b       	or	r25, r18
 12c:	9b b9       	out	0x0b, r25	; 11
		LCD_Port |= (1<<RS);
 12e:	58 9a       	sbi	0x0b, 0	; 11
		LCD_Port|= (1<<EN);
 130:	59 9a       	sbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	00 00       	nop
		_delay_us(1);
		LCD_Port &= ~ (1<<EN);
 134:	59 98       	cbi	0x0b, 1	; 11
 136:	82 e4       	ldi	r24, 0x42	; 66
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_print+0x1c>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_print+0x22>
		_delay_us(200);
		LCD_Port = (LCD_Port & 0x0F) | (str[i] << 4);
 13e:	4b b1       	in	r20, 0x0b	; 11
 140:	91 91       	ld	r25, Z+
 142:	80 e1       	ldi	r24, 0x10	; 16
 144:	98 9f       	mul	r25, r24
 146:	90 01       	movw	r18, r0
 148:	11 24       	eor	r1, r1
 14a:	94 2f       	mov	r25, r20
 14c:	9f 70       	andi	r25, 0x0F	; 15
 14e:	29 2b       	or	r18, r25
 150:	2b b9       	out	0x0b, r18	; 11
		LCD_Port |= (1<<EN);
 152:	59 9a       	sbi	0x0b, 1	; 11
 154:	00 00       	nop
		_delay_us(1);
		LCD_Port &= ~ (1<<EN);
 156:	59 98       	cbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	83 ef       	ldi	r24, 0xF3	; 243
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_print+0x40>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_print+0x46>
 162:	00 00       	nop
}

void lcd_print (char *str){
	
	int i;
	for(i=0; str[i]!=0; i++)
 164:	90 81       	ld	r25, Z
 166:	91 11       	cpse	r25, r1
 168:	dd cf       	rjmp	.-70     	; 0x124 <lcd_print+0x8>
 16a:	08 95       	ret

0000016c <main>:
}

int main(void)
{
	
	lcd_init();
 16c:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_init>
	lcd_print("Teste LCD");
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_print>
    while (1) 
    {
		lcd_action(0xC0);
 178:	80 ec       	ldi	r24, 0xC0	; 192
 17a:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_action>
		lcd_print(__TIME__);
 17e:	8a e0       	ldi	r24, 0x0A	; 10
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_print>
 186:	2f e3       	ldi	r18, 0x3F	; 63
 188:	8d e0       	ldi	r24, 0x0D	; 13
 18a:	93 e0       	ldi	r25, 0x03	; 3
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0x20>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x2a>
 196:	00 00       	nop
 198:	ef cf       	rjmp	.-34     	; 0x178 <main+0xc>

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
