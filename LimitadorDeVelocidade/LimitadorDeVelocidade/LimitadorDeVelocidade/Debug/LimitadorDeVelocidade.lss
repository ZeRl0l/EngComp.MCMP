
LimitadorDeVelocidade.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  0000115a  000011ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000115a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800146  00800146  00001234  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ed4  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000873  00000000  00000000  00002244  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005fd  00000000  00000000  00002ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  000030b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c9  00000000  00000000  000032f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000943  00000000  00000000  000037b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000040fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 93 00 	jmp	0x126	; 0x126 <__ctors_end>
       4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
       8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
       c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      10:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      14:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_5>
      18:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      1c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      20:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      24:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      28:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      2c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      30:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      34:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      38:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      3c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      40:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      44:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      48:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      4c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      50:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      54:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      58:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      5c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      60:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      64:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <__fp_round+0x20>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	4e 41       	sbci	r20, 0x1E	; 30
      ec:	4e 49       	Address 0x000000ec is out of bounds.
.word	0xffff	; ????

000000ed <pstr_inity>:
      ed:	49 4e 49 54 59                                      INITY

000000f2 <pstr_inf>:
      f2:	49 4e 46                                            INF

000000f5 <pwr_m10>:
      f5:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     105:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000010d <pwr_p10>:
     10d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     11d:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000126 <__ctors_end>:
     126:	11 24       	eor	r1, r1
     128:	1f be       	out	0x3f, r1	; 63
     12a:	cf ef       	ldi	r28, 0xFF	; 255
     12c:	d8 e0       	ldi	r29, 0x08	; 8
     12e:	de bf       	out	0x3e, r29	; 62
     130:	cd bf       	out	0x3d, r28	; 61

00000132 <__do_copy_data>:
     132:	11 e0       	ldi	r17, 0x01	; 1
     134:	a0 e0       	ldi	r26, 0x00	; 0
     136:	b1 e0       	ldi	r27, 0x01	; 1
     138:	ea e5       	ldi	r30, 0x5A	; 90
     13a:	f1 e1       	ldi	r31, 0x11	; 17
     13c:	02 c0       	rjmp	.+4      	; 0x142 <__do_copy_data+0x10>
     13e:	05 90       	lpm	r0, Z+
     140:	0d 92       	st	X+, r0
     142:	a6 34       	cpi	r26, 0x46	; 70
     144:	b1 07       	cpc	r27, r17
     146:	d9 f7       	brne	.-10     	; 0x13e <__do_copy_data+0xc>

00000148 <__do_clear_bss>:
     148:	21 e0       	ldi	r18, 0x01	; 1
     14a:	a6 e4       	ldi	r26, 0x46	; 70
     14c:	b1 e0       	ldi	r27, 0x01	; 1
     14e:	01 c0       	rjmp	.+2      	; 0x152 <.do_clear_bss_start>

00000150 <.do_clear_bss_loop>:
     150:	1d 92       	st	X+, r1

00000152 <.do_clear_bss_start>:
     152:	ad 35       	cpi	r26, 0x5D	; 93
     154:	b2 07       	cpc	r27, r18
     156:	e1 f7       	brne	.-8      	; 0x150 <.do_clear_bss_loop>
     158:	0e 94 a1 02 	call	0x542	; 0x542 <main>
     15c:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <_exit>

00000160 <__bad_interrupt>:
     160:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000164 <USART_Init>:

/* -------------------------------------------- SERIAL ----------------------------------------- */

void USART_Init(unsigned int ubrr){
	
	UBRR0H = (unsigned char)(ubrr>>8);
     164:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
     168:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     16c:	88 e1       	ldi	r24, 0x18	; 24
     16e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     172:	8e e0       	ldi	r24, 0x0E	; 14
     174:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     178:	08 95       	ret

0000017a <USART_Transmit>:
}

void USART_Transmit(unsigned char data){

	while ( !( UCSR0A & (1<<UDRE0)) );
     17a:	e0 ec       	ldi	r30, 0xC0	; 192
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	90 81       	ld	r25, Z
     180:	95 ff       	sbrs	r25, 5
     182:	fd cf       	rjmp	.-6      	; 0x17e <USART_Transmit+0x4>
	
	UDR0 = data;
     184:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     188:	08 95       	ret

0000018a <USART_Receive>:
}

unsigned char USART_Receive(void){
	
	while(!(UCSR0A & (1<<RXC0)));
     18a:	e0 ec       	ldi	r30, 0xC0	; 192
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	88 23       	and	r24, r24
     192:	ec f7       	brge	.-6      	; 0x18e <USART_Receive+0x4>
	return UDR0;
     194:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
}
     198:	08 95       	ret

0000019a <USART_putstring>:

void USART_putstring(char* StringPtr){
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0){
     1a0:	88 81       	ld	r24, Y
     1a2:	88 23       	and	r24, r24
     1a4:	31 f0       	breq	.+12     	; 0x1b2 <USART_putstring+0x18>
     1a6:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(*StringPtr++);  
     1a8:	0e 94 bd 00 	call	0x17a	; 0x17a <USART_Transmit>
	
}

void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0){
     1ac:	89 91       	ld	r24, Y+
     1ae:	81 11       	cpse	r24, r1
     1b0:	fb cf       	rjmp	.-10     	; 0x1a8 <USART_putstring+0xe>
		USART_Transmit(*StringPtr++);  
	}
}
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <lcd_comando>:
	lcd_comando(0x06);
	lcd_comando(0x01);
}

void lcd_comando(char comando){
	PORTB = comando;
     1b8:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(0x01);
     1ba:	40 98       	cbi	0x08, 0	; 8
	PORTC &= ~(0x02);
     1bc:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (0x04);
     1be:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c0:	83 ed       	ldi	r24, 0xD3	; 211
     1c2:	90 e3       	ldi	r25, 0x30	; 48
     1c4:	01 97       	sbiw	r24, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_comando+0xc>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_comando+0x12>
     1ca:	00 00       	nop
	_delay_ms(50);
	PORTC &= ~(0x04);
     1cc:	42 98       	cbi	0x08, 2	; 8
     1ce:	08 95       	ret

000001d0 <lcd_init>:
}

/* --------------------------------------------- LCD ------------------------------------------- */

void lcd_init(){
	lcd_comando(0x38);
     1d0:	88 e3       	ldi	r24, 0x38	; 56
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_comando>
	lcd_comando(0x0E);
     1d8:	8e e0       	ldi	r24, 0x0E	; 14
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_comando>
	lcd_comando(0x06);
     1e0:	86 e0       	ldi	r24, 0x06	; 6
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_comando>
	lcd_comando(0x01);
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_comando>
     1f0:	08 95       	ret

000001f2 <lcd_dado>:
	_delay_ms(50);
	PORTC &= ~(0x04);
}

void lcd_dado(char dado){
	PORTB = dado;
     1f2:	85 b9       	out	0x05, r24	; 5
	PORTC |= (0x01);
     1f4:	40 9a       	sbi	0x08, 0	; 8
	PORTC &= ~(0x02);
     1f6:	41 98       	cbi	0x08, 1	; 8
	PORTC |= (0x04);
     1f8:	42 9a       	sbi	0x08, 2	; 8
     1fa:	83 ed       	ldi	r24, 0xD3	; 211
     1fc:	90 e3       	ldi	r25, 0x30	; 48
     1fe:	01 97       	sbiw	r24, 0x01	; 1
     200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_dado+0xc>
     202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_dado+0x12>
     204:	00 00       	nop
	_delay_ms(50);
	PORTC &= ~(0x04);
     206:	42 98       	cbi	0x08, 2	; 8
     208:	08 95       	ret

0000020a <lcd_print>:
	
}

void lcd_print (char *c){
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	ec 01       	movw	r28, r24
		while (*c != 0)         
     210:	88 81       	ld	r24, Y
     212:	88 23       	and	r24, r24
     214:	31 f0       	breq	.+12     	; 0x222 <lcd_print+0x18>
     216:	21 96       	adiw	r28, 0x01	; 1
			lcd_dado(*c++);     
     218:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_dado>
	PORTC &= ~(0x04);
	
}

void lcd_print (char *c){
		while (*c != 0)         
     21c:	89 91       	ld	r24, Y+
     21e:	81 11       	cpse	r24, r1
     220:	fb cf       	rjmp	.-10     	; 0x218 <lcd_print+0xe>
			lcd_dado(*c++);     
}
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <lcd_clear>:

void lcd_clear(){
	lcd_comando(0x01);	
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_comando>
     22e:	83 ef       	ldi	r24, 0xF3	; 243
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <lcd_clear+0xa>
     236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_clear+0x10>
     238:	00 00       	nop
	_delay_ms(2);		
	lcd_comando(0x80);	
     23a:	80 e8       	ldi	r24, 0x80	; 128
     23c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_comando>
     240:	08 95       	ret

00000242 <__vector_5>:
/* ------------------------------------------ INTERRUPT ---------------------------------------- */

float count;
float tempo; 

ISR(PCINT2_vect){
     242:	1f 92       	push	r1
     244:	0f 92       	push	r0
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	0f 92       	push	r0
     24a:	11 24       	eor	r1, r1
     24c:	2f 93       	push	r18
     24e:	3f 93       	push	r19
     250:	4f 93       	push	r20
     252:	5f 93       	push	r21
     254:	6f 93       	push	r22
     256:	7f 93       	push	r23
     258:	8f 93       	push	r24
     25a:	9f 93       	push	r25
     25c:	af 93       	push	r26
     25e:	bf 93       	push	r27
     260:	ef 93       	push	r30
     262:	ff 93       	push	r31

	if((PIND&(1 << 2))){
     264:	4a 9b       	sbis	0x09, 2	; 9
     266:	1a c0       	rjmp	.+52     	; 0x29c <__vector_5+0x5a>
		toogleBit(PORTC,3);
     268:	98 b1       	in	r25, 0x08	; 8
     26a:	88 e0       	ldi	r24, 0x08	; 8
     26c:	89 27       	eor	r24, r25
     26e:	88 b9       	out	0x08, r24	; 8
		count++;
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	40 e8       	ldi	r20, 0x80	; 128
     276:	5f e3       	ldi	r21, 0x3F	; 63
     278:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <count>
     27c:	70 91 54 01 	lds	r23, 0x0154	; 0x800154 <count+0x1>
     280:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <count+0x2>
     284:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <count+0x3>
     288:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__addsf3>
     28c:	60 93 53 01 	sts	0x0153, r22	; 0x800153 <count>
     290:	70 93 54 01 	sts	0x0154, r23	; 0x800154 <count+0x1>
     294:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <count+0x2>
     298:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <count+0x3>
	}
	tempo = count / 60;
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	40 e7       	ldi	r20, 0x70	; 112
     2a2:	52 e4       	ldi	r21, 0x42	; 66
     2a4:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <count>
     2a8:	70 91 54 01 	lds	r23, 0x0154	; 0x800154 <count+0x1>
     2ac:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <count+0x2>
     2b0:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <count+0x3>
     2b4:	0e 94 66 03 	call	0x6cc	; 0x6cc <__divsf3>
     2b8:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <tempo>
     2bc:	70 93 4c 01 	sts	0x014C, r23	; 0x80014c <tempo+0x1>
     2c0:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <tempo+0x2>
     2c4:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <tempo+0x3>
}
     2c8:	ff 91       	pop	r31
     2ca:	ef 91       	pop	r30
     2cc:	bf 91       	pop	r27
     2ce:	af 91       	pop	r26
     2d0:	9f 91       	pop	r25
     2d2:	8f 91       	pop	r24
     2d4:	7f 91       	pop	r23
     2d6:	6f 91       	pop	r22
     2d8:	5f 91       	pop	r21
     2da:	4f 91       	pop	r20
     2dc:	3f 91       	pop	r19
     2de:	2f 91       	pop	r18
     2e0:	0f 90       	pop	r0
     2e2:	0f be       	out	0x3f, r0	; 63
     2e4:	0f 90       	pop	r0
     2e6:	1f 90       	pop	r1
     2e8:	18 95       	reti

000002ea <interrupt_init>:

void interrupt_init(){
	
	PCICR = 0x04;
     2ea:	84 e0       	ldi	r24, 0x04	; 4
     2ec:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK2 = 0x0c;
     2f0:	8c e0       	ldi	r24, 0x0C	; 12
     2f2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	sei();
     2f6:	78 94       	sei
     2f8:	08 95       	ret

000002fa <reverse>:
/* --------------------------------------------- SPEED ------------------------------------------ */

// reverses a string 'str' of length 'len' 
void reverse(char *str, int len) 
{ 
    int i=0, j=len-1, temp; 
     2fa:	9b 01       	movw	r18, r22
     2fc:	21 50       	subi	r18, 0x01	; 1
     2fe:	31 09       	sbc	r19, r1
    while (i<j) 
     300:	12 16       	cp	r1, r18
     302:	13 06       	cpc	r1, r19
     304:	84 f4       	brge	.+32     	; 0x326 <reverse+0x2c>
     306:	fc 01       	movw	r30, r24
     308:	e6 0f       	add	r30, r22
     30a:	f7 1f       	adc	r31, r23
     30c:	dc 01       	movw	r26, r24
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	90 e0       	ldi	r25, 0x00	; 0
    { 
        temp = str[i]; 
     312:	4c 91       	ld	r20, X
        str[i] = str[j]; 
     314:	52 91       	ld	r21, -Z
     316:	5d 93       	st	X+, r21
        str[j] = temp; 
     318:	40 83       	st	Z, r20
        i++; j--; 
     31a:	01 96       	adiw	r24, 0x01	; 1
     31c:	21 50       	subi	r18, 0x01	; 1
     31e:	31 09       	sbc	r19, r1

// reverses a string 'str' of length 'len' 
void reverse(char *str, int len) 
{ 
    int i=0, j=len-1, temp; 
    while (i<j) 
     320:	82 17       	cp	r24, r18
     322:	93 07       	cpc	r25, r19
     324:	b4 f3       	brlt	.-20     	; 0x312 <reverse+0x18>
     326:	08 95       	ret

00000328 <intToStr>:

 // Converts a given integer x to string str[].  d is the number 
 // of digits required in output. If d is more than the number 
 // of digits in x, then 0s are added at the beginning. 
int intToStr(int x, char str[], int d) 
{ 
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	6b 01       	movw	r12, r22
     33a:	8a 01       	movw	r16, r20
    int i = 0; 
    while (x) 
     33c:	00 97       	sbiw	r24, 0x00	; 0
     33e:	99 f0       	breq	.+38     	; 0x366 <intToStr+0x3e>
     340:	eb 01       	movw	r28, r22
     342:	e0 e0       	ldi	r30, 0x00	; 0
     344:	f0 e0       	ldi	r31, 0x00	; 0
    { 
        str[i++] = (x%10) + '0'; 
     346:	0f 2e       	mov	r0, r31
     348:	fa e0       	ldi	r31, 0x0A	; 10
     34a:	ef 2e       	mov	r14, r31
     34c:	f1 2c       	mov	r15, r1
     34e:	f0 2d       	mov	r31, r0
     350:	31 96       	adiw	r30, 0x01	; 1
     352:	b7 01       	movw	r22, r14
     354:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__divmodhi4>
     358:	80 5d       	subi	r24, 0xD0	; 208
     35a:	89 93       	st	Y+, r24
        x = x/10; 
     35c:	86 2f       	mov	r24, r22
     35e:	97 2f       	mov	r25, r23
 // of digits required in output. If d is more than the number 
 // of digits in x, then 0s are added at the beginning. 
int intToStr(int x, char str[], int d) 
{ 
    int i = 0; 
    while (x) 
     360:	00 97       	sbiw	r24, 0x00	; 0
     362:	b1 f7       	brne	.-20     	; 0x350 <intToStr+0x28>
     364:	02 c0       	rjmp	.+4      	; 0x36a <intToStr+0x42>
 // Converts a given integer x to string str[].  d is the number 
 // of digits required in output. If d is more than the number 
 // of digits in x, then 0s are added at the beginning. 
int intToStr(int x, char str[], int d) 
{ 
    int i = 0; 
     366:	e0 e0       	ldi	r30, 0x00	; 0
     368:	f0 e0       	ldi	r31, 0x00	; 0
        x = x/10; 
    } 
  
    // If number of digits required is more, then 
    // add 0s at the beginning 
    while (i < d) 
     36a:	e0 17       	cp	r30, r16
     36c:	f1 07       	cpc	r31, r17
     36e:	5c f4       	brge	.+22     	; 0x386 <intToStr+0x5e>
     370:	ec 0d       	add	r30, r12
     372:	fd 1d       	adc	r31, r13
     374:	96 01       	movw	r18, r12
     376:	20 0f       	add	r18, r16
     378:	31 1f       	adc	r19, r17
        str[i++] = '0'; 
     37a:	80 e3       	ldi	r24, 0x30	; 48
     37c:	81 93       	st	Z+, r24
        x = x/10; 
    } 
  
    // If number of digits required is more, then 
    // add 0s at the beginning 
    while (i < d) 
     37e:	e2 17       	cp	r30, r18
     380:	f3 07       	cpc	r31, r19
     382:	e1 f7       	brne	.-8      	; 0x37c <intToStr+0x54>
     384:	01 c0       	rjmp	.+2      	; 0x388 <intToStr+0x60>
     386:	8f 01       	movw	r16, r30
        str[i++] = '0'; 
  
    reverse(str, i); 
     388:	b8 01       	movw	r22, r16
     38a:	c6 01       	movw	r24, r12
     38c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <reverse>
    str[i] = '\0'; 
     390:	e6 01       	movw	r28, r12
     392:	c0 0f       	add	r28, r16
     394:	d1 1f       	adc	r29, r17
     396:	18 82       	st	Y, r1
    return i; 
} 
     398:	c8 01       	movw	r24, r16
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	ff 90       	pop	r15
     3a4:	ef 90       	pop	r14
     3a6:	df 90       	pop	r13
     3a8:	cf 90       	pop	r12
     3aa:	08 95       	ret

000003ac <ftoa>:

// Converts a floating point number to string. 
void ftoa(float n, char *res, int afterpoint) 
{ 
     3ac:	2f 92       	push	r2
     3ae:	3f 92       	push	r3
     3b0:	4f 92       	push	r4
     3b2:	5f 92       	push	r5
     3b4:	6f 92       	push	r6
     3b6:	7f 92       	push	r7
     3b8:	8f 92       	push	r8
     3ba:	9f 92       	push	r9
     3bc:	af 92       	push	r10
     3be:	bf 92       	push	r11
     3c0:	cf 92       	push	r12
     3c2:	df 92       	push	r13
     3c4:	ef 92       	push	r14
     3c6:	ff 92       	push	r15
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	4b 01       	movw	r8, r22
     3d2:	5c 01       	movw	r10, r24
     3d4:	8a 01       	movw	r16, r20
     3d6:	e9 01       	movw	r28, r18
    // Extract integer part 
    int ipart = (int)n; 
     3d8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__fixsfsi>
     3dc:	6b 01       	movw	r12, r22
     3de:	7c 01       	movw	r14, r24
  
    // Extract floating part 
    float fpart = n - (float)ipart; 
  
    // convert integer part to string 
    int i = intToStr(ipart, res, 0); 
     3e0:	40 e0       	ldi	r20, 0x00	; 0
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	b8 01       	movw	r22, r16
     3e6:	c6 01       	movw	r24, r12
     3e8:	0e 94 94 01 	call	0x328	; 0x328 <intToStr>
     3ec:	1c 01       	movw	r2, r24
  
    // check for display option after point 
    if (afterpoint != 0) 
     3ee:	20 97       	sbiw	r28, 0x00	; 0
     3f0:	99 f1       	breq	.+102    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
    { 
        res[i] = '.';  // add dot 
     3f2:	f8 01       	movw	r30, r16
     3f4:	e8 0f       	add	r30, r24
     3f6:	f9 1f       	adc	r31, r25
     3f8:	8e e2       	ldi	r24, 0x2E	; 46
     3fa:	80 83       	st	Z, r24
  
        // Get the value of fraction part upto given no. 
        // of points after dot. The third parameter is needed 
        // to handle cases like 233.007 
        fpart = fpart * pow(10, afterpoint); 
     3fc:	be 01       	movw	r22, r28
     3fe:	0d 2e       	mov	r0, r29
     400:	00 0c       	add	r0, r0
     402:	88 0b       	sbc	r24, r24
     404:	99 0b       	sbc	r25, r25
     406:	0e 94 10 04 	call	0x820	; 0x820 <__floatsisf>
     40a:	9b 01       	movw	r18, r22
     40c:	ac 01       	movw	r20, r24
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	80 e2       	ldi	r24, 0x20	; 32
     414:	91 e4       	ldi	r25, 0x41	; 65
     416:	0e 94 0e 05 	call	0xa1c	; 0xa1c <pow>
     41a:	2b 01       	movw	r4, r22
     41c:	3c 01       	movw	r6, r24
{ 
    // Extract integer part 
    int ipart = (int)n; 
  
    // Extract floating part 
    float fpart = n - (float)ipart; 
     41e:	b6 01       	movw	r22, r12
     420:	dd 0c       	add	r13, r13
     422:	88 0b       	sbc	r24, r24
     424:	99 0b       	sbc	r25, r25
     426:	0e 94 10 04 	call	0x820	; 0x820 <__floatsisf>
     42a:	9b 01       	movw	r18, r22
     42c:	ac 01       	movw	r20, r24
     42e:	c5 01       	movw	r24, r10
     430:	b4 01       	movw	r22, r8
     432:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__subsf3>
        // Get the value of fraction part upto given no. 
        // of points after dot. The third parameter is needed 
        // to handle cases like 233.007 
        fpart = fpart * pow(10, afterpoint); 
  
        intToStr((int)fpart, res + i + 1, afterpoint); 
     436:	2f ef       	ldi	r18, 0xFF	; 255
     438:	22 1a       	sub	r2, r18
     43a:	32 0a       	sbc	r3, r18
     43c:	02 0d       	add	r16, r2
     43e:	13 1d       	adc	r17, r3
     440:	a3 01       	movw	r20, r6
     442:	92 01       	movw	r18, r4
     444:	0e 94 a1 04 	call	0x942	; 0x942 <__mulsf3>
     448:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__fixsfsi>
     44c:	dc 01       	movw	r26, r24
     44e:	cb 01       	movw	r24, r22
     450:	ae 01       	movw	r20, r28
     452:	b8 01       	movw	r22, r16
     454:	0e 94 94 01 	call	0x328	; 0x328 <intToStr>
    } 
} 
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	ff 90       	pop	r15
     462:	ef 90       	pop	r14
     464:	df 90       	pop	r13
     466:	cf 90       	pop	r12
     468:	bf 90       	pop	r11
     46a:	af 90       	pop	r10
     46c:	9f 90       	pop	r9
     46e:	8f 90       	pop	r8
     470:	7f 90       	pop	r7
     472:	6f 90       	pop	r6
     474:	5f 90       	pop	r5
     476:	4f 90       	pop	r4
     478:	3f 90       	pop	r3
     47a:	2f 90       	pop	r2
     47c:	08 95       	ret

0000047e <speed>:

char x[5];
float vmax;

void speed(float tempo, float vmax){
     47e:	8f 92       	push	r8
     480:	9f 92       	push	r9
     482:	af 92       	push	r10
     484:	bf 92       	push	r11
     486:	cf 92       	push	r12
     488:	df 92       	push	r13
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	49 01       	movw	r8, r18
     494:	5a 01       	movw	r10, r20
	float velocidade = 0;
	float vatual = 0;
	
	velocidade = (tempo/distancia) * 3.6;
	
	vatual += velocidade; 
     496:	2f e8       	ldi	r18, 0x8F	; 143
     498:	32 ec       	ldi	r19, 0xC2	; 194
     49a:	45 e7       	ldi	r20, 0x75	; 117
     49c:	5d e3       	ldi	r21, 0x3D	; 61
     49e:	0e 94 66 03 	call	0x6cc	; 0x6cc <__divsf3>
     4a2:	26 e6       	ldi	r18, 0x66	; 102
     4a4:	36 e6       	ldi	r19, 0x66	; 102
     4a6:	46 e6       	ldi	r20, 0x66	; 102
     4a8:	50 e4       	ldi	r21, 0x40	; 64
     4aa:	0e 94 a1 04 	call	0x942	; 0x942 <__mulsf3>
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	a9 01       	movw	r20, r18
     4b4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__addsf3>
     4b8:	6b 01       	movw	r12, r22
     4ba:	7c 01       	movw	r14, r24
	
	ftoa(vatual, x, 3);
     4bc:	23 e0       	ldi	r18, 0x03	; 3
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	46 e4       	ldi	r20, 0x46	; 70
     4c2:	51 e0       	ldi	r21, 0x01	; 1
     4c4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <ftoa>

	for(int i = 0; i < 3; i++){
		lcd_dado(x[i]);
     4c8:	c6 e4       	ldi	r28, 0x46	; 70
     4ca:	d1 e0       	ldi	r29, 0x01	; 1
     4cc:	88 81       	ld	r24, Y
     4ce:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_dado>
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
     4d4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_dado>
     4d8:	8a 81       	ldd	r24, Y+2	; 0x02
     4da:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_dado>
	}
	
	while(vatual > vmax){
     4de:	a5 01       	movw	r20, r10
     4e0:	94 01       	movw	r18, r8
     4e2:	c7 01       	movw	r24, r14
     4e4:	b6 01       	movw	r22, r12
     4e6:	0e 94 9c 04 	call	0x938	; 0x938 <__gesf2>
     4ea:	18 16       	cp	r1, r24
     4ec:	34 f4       	brge	.+12     	; 0x4fa <speed+0x7c>
		USART_putstring("teste");
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	0e 94 cd 00 	call	0x19a	; 0x19a <USART_putstring>
		clearBit(PORTC,4);
     4f6:	44 98       	cbi	0x08, 4	; 8
     4f8:	fa cf       	rjmp	.-12     	; 0x4ee <speed+0x70>
	}
	
}
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	ff 90       	pop	r15
     500:	ef 90       	pop	r14
     502:	df 90       	pop	r13
     504:	cf 90       	pop	r12
     506:	bf 90       	pop	r11
     508:	af 90       	pop	r10
     50a:	9f 90       	pop	r9
     50c:	8f 90       	pop	r8
     50e:	08 95       	ret

00000510 <welcome>:

/* --------------------------------------------------------------------------------------------- */

void welcome(){
	
	lcd_comando(0x80);
     510:	80 e8       	ldi	r24, 0x80	; 128
     512:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_comando>
	lcd_print("Bem-Vindo!");
     516:	86 e0       	ldi	r24, 0x06	; 6
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_print>
	lcd_comando(0xc0);
     51e:	80 ec       	ldi	r24, 0xC0	; 192
     520:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_comando>
	lcd_print("VMax =     Km/h");
     524:	81 e1       	ldi	r24, 0x11	; 17
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_print>
	lcd_comando(0xc7);
     52c:	87 ec       	ldi	r24, 0xC7	; 199
     52e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_comando>
	USART_putstring("Digite a Velocidade Maxima: ");
     532:	81 e2       	ldi	r24, 0x21	; 33
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	0e 94 cd 00 	call	0x19a	; 0x19a <USART_putstring>
	USART_Transmit(0x0d);
     53a:	8d e0       	ldi	r24, 0x0D	; 13
     53c:	0e 94 bd 00 	call	0x17a	; 0x17a <USART_Transmit>
     540:	08 95       	ret

00000542 <main>:

char tx[4];

int main(void)
{
	DDRB = 0xff;
     542:	8f ef       	ldi	r24, 0xFF	; 255
     544:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;
     546:	87 b9       	out	0x07, r24	; 7
	
	interrupt_init();
     548:	0e 94 75 01 	call	0x2ea	; 0x2ea <interrupt_init>
	lcd_init();
     54c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_init>
	USART_Init(MYUBRR);
     550:	8c e0       	ldi	r24, 0x0C	; 12
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 b2 00 	call	0x164	; 0x164 <USART_Init>
	
	welcome();
     558:	0e 94 88 02 	call	0x510	; 0x510 <welcome>
     55c:	03 e5       	ldi	r16, 0x53	; 83
     55e:	11 e0       	ldi	r17, 0x01	; 1
     560:	cf e4       	ldi	r28, 0x4F	; 79
     562:	d1 e0       	ldi	r29, 0x01	; 1
	
	while (1) 
    {		
		for(int i = 0; i < 4; i++){
			tx[i] = USART_Receive();
     564:	0e 94 c5 00 	call	0x18a	; 0x18a <USART_Receive>
     568:	7e 01       	movw	r14, r28
     56a:	88 83       	st	Y, r24
			USART_Transmit(tx[i]);
     56c:	0e 94 bd 00 	call	0x17a	; 0x17a <USART_Transmit>
			lcd_dado(tx[i]);
     570:	89 91       	ld	r24, Y+
     572:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_dado>
		
			if(tx[i] == 0x0D){
     576:	f7 01       	movw	r30, r14
     578:	80 81       	ld	r24, Z
     57a:	8d 30       	cpi	r24, 0x0D	; 13
     57c:	a9 f5       	brne	.+106    	; 0x5e8 <main+0xa6>
				lcd_clear();
     57e:	0e 94 14 01 	call	0x228	; 0x228 <lcd_clear>
				lcd_print("VAtual:");
     582:	8e e3       	ldi	r24, 0x3E	; 62
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_print>
				lcd_comando(0x8C);
     58a:	8c e8       	ldi	r24, 0x8C	; 140
     58c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_comando>
				lcd_print("Km/h");
     590:	8c e1       	ldi	r24, 0x1C	; 28
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_print>
				vmax = atof(tx);
     598:	8f e4       	ldi	r24, 0x4F	; 79
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	0e 94 df 06 	call	0xdbe	; 0xdbe <atof>
     5a0:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <vmax>
     5a4:	70 93 58 01 	sts	0x0158, r23	; 0x800158 <vmax+0x1>
     5a8:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <vmax+0x2>
     5ac:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <vmax+0x3>
				
				atualiza:
				
				lcd_comando(0x88);
     5b0:	88 e8       	ldi	r24, 0x88	; 136
     5b2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_comando>
				speed(tempo, vmax);
     5b6:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <vmax>
     5ba:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <vmax+0x1>
     5be:	40 91 59 01 	lds	r20, 0x0159	; 0x800159 <vmax+0x2>
     5c2:	50 91 5a 01 	lds	r21, 0x015A	; 0x80015a <vmax+0x3>
     5c6:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <tempo>
     5ca:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <tempo+0x1>
     5ce:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <tempo+0x2>
     5d2:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <tempo+0x3>
     5d6:	0e 94 3f 02 	call	0x47e	; 0x47e <speed>
     5da:	87 ea       	ldi	r24, 0xA7	; 167
     5dc:	91 e6       	ldi	r25, 0x61	; 97
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	f1 f7       	brne	.-4      	; 0x5de <main+0x9c>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <main+0xa2>
     5e4:	00 00       	nop
     5e6:	e4 cf       	rjmp	.-56     	; 0x5b0 <main+0x6e>
	
	welcome();
	
	while (1) 
    {		
		for(int i = 0; i < 4; i++){
     5e8:	c0 17       	cp	r28, r16
     5ea:	d1 07       	cpc	r29, r17
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <main+0xae>
     5ee:	ba cf       	rjmp	.-140    	; 0x564 <main+0x22>
     5f0:	b7 cf       	rjmp	.-146    	; 0x560 <main+0x1e>

000005f2 <__subsf3>:
     5f2:	50 58       	subi	r21, 0x80	; 128

000005f4 <__addsf3>:
     5f4:	bb 27       	eor	r27, r27
     5f6:	aa 27       	eor	r26, r26
     5f8:	0e 94 11 03 	call	0x622	; 0x622 <__addsf3x>
     5fc:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__fp_round>
     600:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__fp_pscA>
     604:	38 f0       	brcs	.+14     	; 0x614 <__addsf3+0x20>
     606:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__fp_pscB>
     60a:	20 f0       	brcs	.+8      	; 0x614 <__addsf3+0x20>
     60c:	39 f4       	brne	.+14     	; 0x61c <__addsf3+0x28>
     60e:	9f 3f       	cpi	r25, 0xFF	; 255
     610:	19 f4       	brne	.+6      	; 0x618 <__addsf3+0x24>
     612:	26 f4       	brtc	.+8      	; 0x61c <__addsf3+0x28>
     614:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_nan>
     618:	0e f4       	brtc	.+2      	; 0x61c <__addsf3+0x28>
     61a:	e0 95       	com	r30
     61c:	e7 fb       	bst	r30, 7
     61e:	0c 94 4b 04 	jmp	0x896	; 0x896 <__fp_inf>

00000622 <__addsf3x>:
     622:	e9 2f       	mov	r30, r25
     624:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fp_split3>
     628:	58 f3       	brcs	.-42     	; 0x600 <__addsf3+0xc>
     62a:	ba 17       	cp	r27, r26
     62c:	62 07       	cpc	r22, r18
     62e:	73 07       	cpc	r23, r19
     630:	84 07       	cpc	r24, r20
     632:	95 07       	cpc	r25, r21
     634:	20 f0       	brcs	.+8      	; 0x63e <__addsf3x+0x1c>
     636:	79 f4       	brne	.+30     	; 0x656 <__addsf3x+0x34>
     638:	a6 f5       	brtc	.+104    	; 0x6a2 <__addsf3x+0x80>
     63a:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_zero>
     63e:	0e f4       	brtc	.+2      	; 0x642 <__addsf3x+0x20>
     640:	e0 95       	com	r30
     642:	0b 2e       	mov	r0, r27
     644:	ba 2f       	mov	r27, r26
     646:	a0 2d       	mov	r26, r0
     648:	0b 01       	movw	r0, r22
     64a:	b9 01       	movw	r22, r18
     64c:	90 01       	movw	r18, r0
     64e:	0c 01       	movw	r0, r24
     650:	ca 01       	movw	r24, r20
     652:	a0 01       	movw	r20, r0
     654:	11 24       	eor	r1, r1
     656:	ff 27       	eor	r31, r31
     658:	59 1b       	sub	r21, r25
     65a:	99 f0       	breq	.+38     	; 0x682 <__addsf3x+0x60>
     65c:	59 3f       	cpi	r21, 0xF9	; 249
     65e:	50 f4       	brcc	.+20     	; 0x674 <__addsf3x+0x52>
     660:	50 3e       	cpi	r21, 0xE0	; 224
     662:	68 f1       	brcs	.+90     	; 0x6be <__addsf3x+0x9c>
     664:	1a 16       	cp	r1, r26
     666:	f0 40       	sbci	r31, 0x00	; 0
     668:	a2 2f       	mov	r26, r18
     66a:	23 2f       	mov	r18, r19
     66c:	34 2f       	mov	r19, r20
     66e:	44 27       	eor	r20, r20
     670:	58 5f       	subi	r21, 0xF8	; 248
     672:	f3 cf       	rjmp	.-26     	; 0x65a <__addsf3x+0x38>
     674:	46 95       	lsr	r20
     676:	37 95       	ror	r19
     678:	27 95       	ror	r18
     67a:	a7 95       	ror	r26
     67c:	f0 40       	sbci	r31, 0x00	; 0
     67e:	53 95       	inc	r21
     680:	c9 f7       	brne	.-14     	; 0x674 <__addsf3x+0x52>
     682:	7e f4       	brtc	.+30     	; 0x6a2 <__addsf3x+0x80>
     684:	1f 16       	cp	r1, r31
     686:	ba 0b       	sbc	r27, r26
     688:	62 0b       	sbc	r22, r18
     68a:	73 0b       	sbc	r23, r19
     68c:	84 0b       	sbc	r24, r20
     68e:	ba f0       	brmi	.+46     	; 0x6be <__addsf3x+0x9c>
     690:	91 50       	subi	r25, 0x01	; 1
     692:	a1 f0       	breq	.+40     	; 0x6bc <__addsf3x+0x9a>
     694:	ff 0f       	add	r31, r31
     696:	bb 1f       	adc	r27, r27
     698:	66 1f       	adc	r22, r22
     69a:	77 1f       	adc	r23, r23
     69c:	88 1f       	adc	r24, r24
     69e:	c2 f7       	brpl	.-16     	; 0x690 <__addsf3x+0x6e>
     6a0:	0e c0       	rjmp	.+28     	; 0x6be <__addsf3x+0x9c>
     6a2:	ba 0f       	add	r27, r26
     6a4:	62 1f       	adc	r22, r18
     6a6:	73 1f       	adc	r23, r19
     6a8:	84 1f       	adc	r24, r20
     6aa:	48 f4       	brcc	.+18     	; 0x6be <__addsf3x+0x9c>
     6ac:	87 95       	ror	r24
     6ae:	77 95       	ror	r23
     6b0:	67 95       	ror	r22
     6b2:	b7 95       	ror	r27
     6b4:	f7 95       	ror	r31
     6b6:	9e 3f       	cpi	r25, 0xFE	; 254
     6b8:	08 f0       	brcs	.+2      	; 0x6bc <__addsf3x+0x9a>
     6ba:	b0 cf       	rjmp	.-160    	; 0x61c <__addsf3+0x28>
     6bc:	93 95       	inc	r25
     6be:	88 0f       	add	r24, r24
     6c0:	08 f0       	brcs	.+2      	; 0x6c4 <__addsf3x+0xa2>
     6c2:	99 27       	eor	r25, r25
     6c4:	ee 0f       	add	r30, r30
     6c6:	97 95       	ror	r25
     6c8:	87 95       	ror	r24
     6ca:	08 95       	ret

000006cc <__divsf3>:
     6cc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__divsf3x>
     6d0:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__fp_round>
     6d4:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__fp_pscB>
     6d8:	58 f0       	brcs	.+22     	; 0x6f0 <__divsf3+0x24>
     6da:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__fp_pscA>
     6de:	40 f0       	brcs	.+16     	; 0x6f0 <__divsf3+0x24>
     6e0:	29 f4       	brne	.+10     	; 0x6ec <__divsf3+0x20>
     6e2:	5f 3f       	cpi	r21, 0xFF	; 255
     6e4:	29 f0       	breq	.+10     	; 0x6f0 <__divsf3+0x24>
     6e6:	0c 94 4b 04 	jmp	0x896	; 0x896 <__fp_inf>
     6ea:	51 11       	cpse	r21, r1
     6ec:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_szero>
     6f0:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_nan>

000006f4 <__divsf3x>:
     6f4:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fp_split3>
     6f8:	68 f3       	brcs	.-38     	; 0x6d4 <__divsf3+0x8>

000006fa <__divsf3_pse>:
     6fa:	99 23       	and	r25, r25
     6fc:	b1 f3       	breq	.-20     	; 0x6ea <__divsf3+0x1e>
     6fe:	55 23       	and	r21, r21
     700:	91 f3       	breq	.-28     	; 0x6e6 <__divsf3+0x1a>
     702:	95 1b       	sub	r25, r21
     704:	55 0b       	sbc	r21, r21
     706:	bb 27       	eor	r27, r27
     708:	aa 27       	eor	r26, r26
     70a:	62 17       	cp	r22, r18
     70c:	73 07       	cpc	r23, r19
     70e:	84 07       	cpc	r24, r20
     710:	38 f0       	brcs	.+14     	; 0x720 <__divsf3_pse+0x26>
     712:	9f 5f       	subi	r25, 0xFF	; 255
     714:	5f 4f       	sbci	r21, 0xFF	; 255
     716:	22 0f       	add	r18, r18
     718:	33 1f       	adc	r19, r19
     71a:	44 1f       	adc	r20, r20
     71c:	aa 1f       	adc	r26, r26
     71e:	a9 f3       	breq	.-22     	; 0x70a <__divsf3_pse+0x10>
     720:	35 d0       	rcall	.+106    	; 0x78c <__divsf3_pse+0x92>
     722:	0e 2e       	mov	r0, r30
     724:	3a f0       	brmi	.+14     	; 0x734 <__divsf3_pse+0x3a>
     726:	e0 e8       	ldi	r30, 0x80	; 128
     728:	32 d0       	rcall	.+100    	; 0x78e <__divsf3_pse+0x94>
     72a:	91 50       	subi	r25, 0x01	; 1
     72c:	50 40       	sbci	r21, 0x00	; 0
     72e:	e6 95       	lsr	r30
     730:	00 1c       	adc	r0, r0
     732:	ca f7       	brpl	.-14     	; 0x726 <__divsf3_pse+0x2c>
     734:	2b d0       	rcall	.+86     	; 0x78c <__divsf3_pse+0x92>
     736:	fe 2f       	mov	r31, r30
     738:	29 d0       	rcall	.+82     	; 0x78c <__divsf3_pse+0x92>
     73a:	66 0f       	add	r22, r22
     73c:	77 1f       	adc	r23, r23
     73e:	88 1f       	adc	r24, r24
     740:	bb 1f       	adc	r27, r27
     742:	26 17       	cp	r18, r22
     744:	37 07       	cpc	r19, r23
     746:	48 07       	cpc	r20, r24
     748:	ab 07       	cpc	r26, r27
     74a:	b0 e8       	ldi	r27, 0x80	; 128
     74c:	09 f0       	breq	.+2      	; 0x750 <__divsf3_pse+0x56>
     74e:	bb 0b       	sbc	r27, r27
     750:	80 2d       	mov	r24, r0
     752:	bf 01       	movw	r22, r30
     754:	ff 27       	eor	r31, r31
     756:	93 58       	subi	r25, 0x83	; 131
     758:	5f 4f       	sbci	r21, 0xFF	; 255
     75a:	3a f0       	brmi	.+14     	; 0x76a <__divsf3_pse+0x70>
     75c:	9e 3f       	cpi	r25, 0xFE	; 254
     75e:	51 05       	cpc	r21, r1
     760:	78 f0       	brcs	.+30     	; 0x780 <__divsf3_pse+0x86>
     762:	0c 94 4b 04 	jmp	0x896	; 0x896 <__fp_inf>
     766:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_szero>
     76a:	5f 3f       	cpi	r21, 0xFF	; 255
     76c:	e4 f3       	brlt	.-8      	; 0x766 <__divsf3_pse+0x6c>
     76e:	98 3e       	cpi	r25, 0xE8	; 232
     770:	d4 f3       	brlt	.-12     	; 0x766 <__divsf3_pse+0x6c>
     772:	86 95       	lsr	r24
     774:	77 95       	ror	r23
     776:	67 95       	ror	r22
     778:	b7 95       	ror	r27
     77a:	f7 95       	ror	r31
     77c:	9f 5f       	subi	r25, 0xFF	; 255
     77e:	c9 f7       	brne	.-14     	; 0x772 <__divsf3_pse+0x78>
     780:	88 0f       	add	r24, r24
     782:	91 1d       	adc	r25, r1
     784:	96 95       	lsr	r25
     786:	87 95       	ror	r24
     788:	97 f9       	bld	r25, 7
     78a:	08 95       	ret
     78c:	e1 e0       	ldi	r30, 0x01	; 1
     78e:	66 0f       	add	r22, r22
     790:	77 1f       	adc	r23, r23
     792:	88 1f       	adc	r24, r24
     794:	bb 1f       	adc	r27, r27
     796:	62 17       	cp	r22, r18
     798:	73 07       	cpc	r23, r19
     79a:	84 07       	cpc	r24, r20
     79c:	ba 07       	cpc	r27, r26
     79e:	20 f0       	brcs	.+8      	; 0x7a8 <__divsf3_pse+0xae>
     7a0:	62 1b       	sub	r22, r18
     7a2:	73 0b       	sbc	r23, r19
     7a4:	84 0b       	sbc	r24, r20
     7a6:	ba 0b       	sbc	r27, r26
     7a8:	ee 1f       	adc	r30, r30
     7aa:	88 f7       	brcc	.-30     	; 0x78e <__divsf3_pse+0x94>
     7ac:	e0 95       	com	r30
     7ae:	08 95       	ret

000007b0 <__fixsfsi>:
     7b0:	0e 94 df 03 	call	0x7be	; 0x7be <__fixunssfsi>
     7b4:	68 94       	set
     7b6:	b1 11       	cpse	r27, r1
     7b8:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_szero>
     7bc:	08 95       	ret

000007be <__fixunssfsi>:
     7be:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fp_splitA>
     7c2:	88 f0       	brcs	.+34     	; 0x7e6 <__fixunssfsi+0x28>
     7c4:	9f 57       	subi	r25, 0x7F	; 127
     7c6:	98 f0       	brcs	.+38     	; 0x7ee <__fixunssfsi+0x30>
     7c8:	b9 2f       	mov	r27, r25
     7ca:	99 27       	eor	r25, r25
     7cc:	b7 51       	subi	r27, 0x17	; 23
     7ce:	b0 f0       	brcs	.+44     	; 0x7fc <__fixunssfsi+0x3e>
     7d0:	e1 f0       	breq	.+56     	; 0x80a <__fixunssfsi+0x4c>
     7d2:	66 0f       	add	r22, r22
     7d4:	77 1f       	adc	r23, r23
     7d6:	88 1f       	adc	r24, r24
     7d8:	99 1f       	adc	r25, r25
     7da:	1a f0       	brmi	.+6      	; 0x7e2 <__fixunssfsi+0x24>
     7dc:	ba 95       	dec	r27
     7de:	c9 f7       	brne	.-14     	; 0x7d2 <__fixunssfsi+0x14>
     7e0:	14 c0       	rjmp	.+40     	; 0x80a <__fixunssfsi+0x4c>
     7e2:	b1 30       	cpi	r27, 0x01	; 1
     7e4:	91 f0       	breq	.+36     	; 0x80a <__fixunssfsi+0x4c>
     7e6:	0e 94 95 04 	call	0x92a	; 0x92a <__fp_zero>
     7ea:	b1 e0       	ldi	r27, 0x01	; 1
     7ec:	08 95       	ret
     7ee:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_zero>
     7f2:	67 2f       	mov	r22, r23
     7f4:	78 2f       	mov	r23, r24
     7f6:	88 27       	eor	r24, r24
     7f8:	b8 5f       	subi	r27, 0xF8	; 248
     7fa:	39 f0       	breq	.+14     	; 0x80a <__fixunssfsi+0x4c>
     7fc:	b9 3f       	cpi	r27, 0xF9	; 249
     7fe:	cc f3       	brlt	.-14     	; 0x7f2 <__fixunssfsi+0x34>
     800:	86 95       	lsr	r24
     802:	77 95       	ror	r23
     804:	67 95       	ror	r22
     806:	b3 95       	inc	r27
     808:	d9 f7       	brne	.-10     	; 0x800 <__fixunssfsi+0x42>
     80a:	3e f4       	brtc	.+14     	; 0x81a <__fixunssfsi+0x5c>
     80c:	90 95       	com	r25
     80e:	80 95       	com	r24
     810:	70 95       	com	r23
     812:	61 95       	neg	r22
     814:	7f 4f       	sbci	r23, 0xFF	; 255
     816:	8f 4f       	sbci	r24, 0xFF	; 255
     818:	9f 4f       	sbci	r25, 0xFF	; 255
     81a:	08 95       	ret

0000081c <__floatunsisf>:
     81c:	e8 94       	clt
     81e:	09 c0       	rjmp	.+18     	; 0x832 <__floatsisf+0x12>

00000820 <__floatsisf>:
     820:	97 fb       	bst	r25, 7
     822:	3e f4       	brtc	.+14     	; 0x832 <__floatsisf+0x12>
     824:	90 95       	com	r25
     826:	80 95       	com	r24
     828:	70 95       	com	r23
     82a:	61 95       	neg	r22
     82c:	7f 4f       	sbci	r23, 0xFF	; 255
     82e:	8f 4f       	sbci	r24, 0xFF	; 255
     830:	9f 4f       	sbci	r25, 0xFF	; 255
     832:	99 23       	and	r25, r25
     834:	a9 f0       	breq	.+42     	; 0x860 <__floatsisf+0x40>
     836:	f9 2f       	mov	r31, r25
     838:	96 e9       	ldi	r25, 0x96	; 150
     83a:	bb 27       	eor	r27, r27
     83c:	93 95       	inc	r25
     83e:	f6 95       	lsr	r31
     840:	87 95       	ror	r24
     842:	77 95       	ror	r23
     844:	67 95       	ror	r22
     846:	b7 95       	ror	r27
     848:	f1 11       	cpse	r31, r1
     84a:	f8 cf       	rjmp	.-16     	; 0x83c <__floatsisf+0x1c>
     84c:	fa f4       	brpl	.+62     	; 0x88c <__floatsisf+0x6c>
     84e:	bb 0f       	add	r27, r27
     850:	11 f4       	brne	.+4      	; 0x856 <__floatsisf+0x36>
     852:	60 ff       	sbrs	r22, 0
     854:	1b c0       	rjmp	.+54     	; 0x88c <__floatsisf+0x6c>
     856:	6f 5f       	subi	r22, 0xFF	; 255
     858:	7f 4f       	sbci	r23, 0xFF	; 255
     85a:	8f 4f       	sbci	r24, 0xFF	; 255
     85c:	9f 4f       	sbci	r25, 0xFF	; 255
     85e:	16 c0       	rjmp	.+44     	; 0x88c <__floatsisf+0x6c>
     860:	88 23       	and	r24, r24
     862:	11 f0       	breq	.+4      	; 0x868 <__floatsisf+0x48>
     864:	96 e9       	ldi	r25, 0x96	; 150
     866:	11 c0       	rjmp	.+34     	; 0x88a <__floatsisf+0x6a>
     868:	77 23       	and	r23, r23
     86a:	21 f0       	breq	.+8      	; 0x874 <__floatsisf+0x54>
     86c:	9e e8       	ldi	r25, 0x8E	; 142
     86e:	87 2f       	mov	r24, r23
     870:	76 2f       	mov	r23, r22
     872:	05 c0       	rjmp	.+10     	; 0x87e <__floatsisf+0x5e>
     874:	66 23       	and	r22, r22
     876:	71 f0       	breq	.+28     	; 0x894 <__floatsisf+0x74>
     878:	96 e8       	ldi	r25, 0x86	; 134
     87a:	86 2f       	mov	r24, r22
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	2a f0       	brmi	.+10     	; 0x88c <__floatsisf+0x6c>
     882:	9a 95       	dec	r25
     884:	66 0f       	add	r22, r22
     886:	77 1f       	adc	r23, r23
     888:	88 1f       	adc	r24, r24
     88a:	da f7       	brpl	.-10     	; 0x882 <__floatsisf+0x62>
     88c:	88 0f       	add	r24, r24
     88e:	96 95       	lsr	r25
     890:	87 95       	ror	r24
     892:	97 f9       	bld	r25, 7
     894:	08 95       	ret

00000896 <__fp_inf>:
     896:	97 f9       	bld	r25, 7
     898:	9f 67       	ori	r25, 0x7F	; 127
     89a:	80 e8       	ldi	r24, 0x80	; 128
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	08 95       	ret

000008a2 <__fp_nan>:
     8a2:	9f ef       	ldi	r25, 0xFF	; 255
     8a4:	80 ec       	ldi	r24, 0xC0	; 192
     8a6:	08 95       	ret

000008a8 <__fp_pscA>:
     8a8:	00 24       	eor	r0, r0
     8aa:	0a 94       	dec	r0
     8ac:	16 16       	cp	r1, r22
     8ae:	17 06       	cpc	r1, r23
     8b0:	18 06       	cpc	r1, r24
     8b2:	09 06       	cpc	r0, r25
     8b4:	08 95       	ret

000008b6 <__fp_pscB>:
     8b6:	00 24       	eor	r0, r0
     8b8:	0a 94       	dec	r0
     8ba:	12 16       	cp	r1, r18
     8bc:	13 06       	cpc	r1, r19
     8be:	14 06       	cpc	r1, r20
     8c0:	05 06       	cpc	r0, r21
     8c2:	08 95       	ret

000008c4 <__fp_round>:
     8c4:	09 2e       	mov	r0, r25
     8c6:	03 94       	inc	r0
     8c8:	00 0c       	add	r0, r0
     8ca:	11 f4       	brne	.+4      	; 0x8d0 <__fp_round+0xc>
     8cc:	88 23       	and	r24, r24
     8ce:	52 f0       	brmi	.+20     	; 0x8e4 <__fp_round+0x20>
     8d0:	bb 0f       	add	r27, r27
     8d2:	40 f4       	brcc	.+16     	; 0x8e4 <__fp_round+0x20>
     8d4:	bf 2b       	or	r27, r31
     8d6:	11 f4       	brne	.+4      	; 0x8dc <__fp_round+0x18>
     8d8:	60 ff       	sbrs	r22, 0
     8da:	04 c0       	rjmp	.+8      	; 0x8e4 <__fp_round+0x20>
     8dc:	6f 5f       	subi	r22, 0xFF	; 255
     8de:	7f 4f       	sbci	r23, 0xFF	; 255
     8e0:	8f 4f       	sbci	r24, 0xFF	; 255
     8e2:	9f 4f       	sbci	r25, 0xFF	; 255
     8e4:	08 95       	ret

000008e6 <__fp_split3>:
     8e6:	57 fd       	sbrc	r21, 7
     8e8:	90 58       	subi	r25, 0x80	; 128
     8ea:	44 0f       	add	r20, r20
     8ec:	55 1f       	adc	r21, r21
     8ee:	59 f0       	breq	.+22     	; 0x906 <__stack+0x7>
     8f0:	5f 3f       	cpi	r21, 0xFF	; 255
     8f2:	71 f0       	breq	.+28     	; 0x910 <__stack+0x11>
     8f4:	47 95       	ror	r20

000008f6 <__fp_splitA>:
     8f6:	88 0f       	add	r24, r24
     8f8:	97 fb       	bst	r25, 7
     8fa:	99 1f       	adc	r25, r25
     8fc:	61 f0       	breq	.+24     	; 0x916 <__stack+0x17>
     8fe:	9f 3f       	cpi	r25, 0xFF	; 255
     900:	79 f0       	breq	.+30     	; 0x920 <__stack+0x21>
     902:	87 95       	ror	r24
     904:	08 95       	ret
     906:	12 16       	cp	r1, r18
     908:	13 06       	cpc	r1, r19
     90a:	14 06       	cpc	r1, r20
     90c:	55 1f       	adc	r21, r21
     90e:	f2 cf       	rjmp	.-28     	; 0x8f4 <__fp_split3+0xe>
     910:	46 95       	lsr	r20
     912:	f1 df       	rcall	.-30     	; 0x8f6 <__fp_splitA>
     914:	08 c0       	rjmp	.+16     	; 0x926 <__stack+0x27>
     916:	16 16       	cp	r1, r22
     918:	17 06       	cpc	r1, r23
     91a:	18 06       	cpc	r1, r24
     91c:	99 1f       	adc	r25, r25
     91e:	f1 cf       	rjmp	.-30     	; 0x902 <__stack+0x3>
     920:	86 95       	lsr	r24
     922:	71 05       	cpc	r23, r1
     924:	61 05       	cpc	r22, r1
     926:	08 94       	sec
     928:	08 95       	ret

0000092a <__fp_zero>:
     92a:	e8 94       	clt

0000092c <__fp_szero>:
     92c:	bb 27       	eor	r27, r27
     92e:	66 27       	eor	r22, r22
     930:	77 27       	eor	r23, r23
     932:	cb 01       	movw	r24, r22
     934:	97 f9       	bld	r25, 7
     936:	08 95       	ret

00000938 <__gesf2>:
     938:	0e 94 98 05 	call	0xb30	; 0xb30 <__fp_cmp>
     93c:	08 f4       	brcc	.+2      	; 0x940 <__gesf2+0x8>
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	08 95       	ret

00000942 <__mulsf3>:
     942:	0e 94 b4 04 	call	0x968	; 0x968 <__mulsf3x>
     946:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__fp_round>
     94a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__fp_pscA>
     94e:	38 f0       	brcs	.+14     	; 0x95e <__mulsf3+0x1c>
     950:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__fp_pscB>
     954:	20 f0       	brcs	.+8      	; 0x95e <__mulsf3+0x1c>
     956:	95 23       	and	r25, r21
     958:	11 f0       	breq	.+4      	; 0x95e <__mulsf3+0x1c>
     95a:	0c 94 4b 04 	jmp	0x896	; 0x896 <__fp_inf>
     95e:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_nan>
     962:	11 24       	eor	r1, r1
     964:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_szero>

00000968 <__mulsf3x>:
     968:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fp_split3>
     96c:	70 f3       	brcs	.-36     	; 0x94a <__mulsf3+0x8>

0000096e <__mulsf3_pse>:
     96e:	95 9f       	mul	r25, r21
     970:	c1 f3       	breq	.-16     	; 0x962 <__mulsf3+0x20>
     972:	95 0f       	add	r25, r21
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	55 1f       	adc	r21, r21
     978:	62 9f       	mul	r22, r18
     97a:	f0 01       	movw	r30, r0
     97c:	72 9f       	mul	r23, r18
     97e:	bb 27       	eor	r27, r27
     980:	f0 0d       	add	r31, r0
     982:	b1 1d       	adc	r27, r1
     984:	63 9f       	mul	r22, r19
     986:	aa 27       	eor	r26, r26
     988:	f0 0d       	add	r31, r0
     98a:	b1 1d       	adc	r27, r1
     98c:	aa 1f       	adc	r26, r26
     98e:	64 9f       	mul	r22, r20
     990:	66 27       	eor	r22, r22
     992:	b0 0d       	add	r27, r0
     994:	a1 1d       	adc	r26, r1
     996:	66 1f       	adc	r22, r22
     998:	82 9f       	mul	r24, r18
     99a:	22 27       	eor	r18, r18
     99c:	b0 0d       	add	r27, r0
     99e:	a1 1d       	adc	r26, r1
     9a0:	62 1f       	adc	r22, r18
     9a2:	73 9f       	mul	r23, r19
     9a4:	b0 0d       	add	r27, r0
     9a6:	a1 1d       	adc	r26, r1
     9a8:	62 1f       	adc	r22, r18
     9aa:	83 9f       	mul	r24, r19
     9ac:	a0 0d       	add	r26, r0
     9ae:	61 1d       	adc	r22, r1
     9b0:	22 1f       	adc	r18, r18
     9b2:	74 9f       	mul	r23, r20
     9b4:	33 27       	eor	r19, r19
     9b6:	a0 0d       	add	r26, r0
     9b8:	61 1d       	adc	r22, r1
     9ba:	23 1f       	adc	r18, r19
     9bc:	84 9f       	mul	r24, r20
     9be:	60 0d       	add	r22, r0
     9c0:	21 1d       	adc	r18, r1
     9c2:	82 2f       	mov	r24, r18
     9c4:	76 2f       	mov	r23, r22
     9c6:	6a 2f       	mov	r22, r26
     9c8:	11 24       	eor	r1, r1
     9ca:	9f 57       	subi	r25, 0x7F	; 127
     9cc:	50 40       	sbci	r21, 0x00	; 0
     9ce:	9a f0       	brmi	.+38     	; 0x9f6 <__mulsf3_pse+0x88>
     9d0:	f1 f0       	breq	.+60     	; 0xa0e <__mulsf3_pse+0xa0>
     9d2:	88 23       	and	r24, r24
     9d4:	4a f0       	brmi	.+18     	; 0x9e8 <__mulsf3_pse+0x7a>
     9d6:	ee 0f       	add	r30, r30
     9d8:	ff 1f       	adc	r31, r31
     9da:	bb 1f       	adc	r27, r27
     9dc:	66 1f       	adc	r22, r22
     9de:	77 1f       	adc	r23, r23
     9e0:	88 1f       	adc	r24, r24
     9e2:	91 50       	subi	r25, 0x01	; 1
     9e4:	50 40       	sbci	r21, 0x00	; 0
     9e6:	a9 f7       	brne	.-22     	; 0x9d2 <__mulsf3_pse+0x64>
     9e8:	9e 3f       	cpi	r25, 0xFE	; 254
     9ea:	51 05       	cpc	r21, r1
     9ec:	80 f0       	brcs	.+32     	; 0xa0e <__mulsf3_pse+0xa0>
     9ee:	0c 94 4b 04 	jmp	0x896	; 0x896 <__fp_inf>
     9f2:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_szero>
     9f6:	5f 3f       	cpi	r21, 0xFF	; 255
     9f8:	e4 f3       	brlt	.-8      	; 0x9f2 <__mulsf3_pse+0x84>
     9fa:	98 3e       	cpi	r25, 0xE8	; 232
     9fc:	d4 f3       	brlt	.-12     	; 0x9f2 <__mulsf3_pse+0x84>
     9fe:	86 95       	lsr	r24
     a00:	77 95       	ror	r23
     a02:	67 95       	ror	r22
     a04:	b7 95       	ror	r27
     a06:	f7 95       	ror	r31
     a08:	e7 95       	ror	r30
     a0a:	9f 5f       	subi	r25, 0xFF	; 255
     a0c:	c1 f7       	brne	.-16     	; 0x9fe <__mulsf3_pse+0x90>
     a0e:	fe 2b       	or	r31, r30
     a10:	88 0f       	add	r24, r24
     a12:	91 1d       	adc	r25, r1
     a14:	96 95       	lsr	r25
     a16:	87 95       	ror	r24
     a18:	97 f9       	bld	r25, 7
     a1a:	08 95       	ret

00000a1c <pow>:
     a1c:	fa 01       	movw	r30, r20
     a1e:	ee 0f       	add	r30, r30
     a20:	ff 1f       	adc	r31, r31
     a22:	30 96       	adiw	r30, 0x00	; 0
     a24:	21 05       	cpc	r18, r1
     a26:	31 05       	cpc	r19, r1
     a28:	a1 f1       	breq	.+104    	; 0xa92 <pow+0x76>
     a2a:	61 15       	cp	r22, r1
     a2c:	71 05       	cpc	r23, r1
     a2e:	61 f4       	brne	.+24     	; 0xa48 <pow+0x2c>
     a30:	80 38       	cpi	r24, 0x80	; 128
     a32:	bf e3       	ldi	r27, 0x3F	; 63
     a34:	9b 07       	cpc	r25, r27
     a36:	49 f1       	breq	.+82     	; 0xa8a <pow+0x6e>
     a38:	68 94       	set
     a3a:	90 38       	cpi	r25, 0x80	; 128
     a3c:	81 05       	cpc	r24, r1
     a3e:	61 f0       	breq	.+24     	; 0xa58 <pow+0x3c>
     a40:	80 38       	cpi	r24, 0x80	; 128
     a42:	bf ef       	ldi	r27, 0xFF	; 255
     a44:	9b 07       	cpc	r25, r27
     a46:	41 f0       	breq	.+16     	; 0xa58 <pow+0x3c>
     a48:	99 23       	and	r25, r25
     a4a:	4a f5       	brpl	.+82     	; 0xa9e <pow+0x82>
     a4c:	ff 3f       	cpi	r31, 0xFF	; 255
     a4e:	e1 05       	cpc	r30, r1
     a50:	31 05       	cpc	r19, r1
     a52:	21 05       	cpc	r18, r1
     a54:	19 f1       	breq	.+70     	; 0xa9c <pow+0x80>
     a56:	e8 94       	clt
     a58:	08 94       	sec
     a5a:	e7 95       	ror	r30
     a5c:	d9 01       	movw	r26, r18
     a5e:	aa 23       	and	r26, r26
     a60:	29 f4       	brne	.+10     	; 0xa6c <pow+0x50>
     a62:	ab 2f       	mov	r26, r27
     a64:	be 2f       	mov	r27, r30
     a66:	f8 5f       	subi	r31, 0xF8	; 248
     a68:	d0 f3       	brcs	.-12     	; 0xa5e <pow+0x42>
     a6a:	10 c0       	rjmp	.+32     	; 0xa8c <pow+0x70>
     a6c:	ff 5f       	subi	r31, 0xFF	; 255
     a6e:	70 f4       	brcc	.+28     	; 0xa8c <pow+0x70>
     a70:	a6 95       	lsr	r26
     a72:	e0 f7       	brcc	.-8      	; 0xa6c <pow+0x50>
     a74:	f7 39       	cpi	r31, 0x97	; 151
     a76:	50 f0       	brcs	.+20     	; 0xa8c <pow+0x70>
     a78:	19 f0       	breq	.+6      	; 0xa80 <pow+0x64>
     a7a:	ff 3a       	cpi	r31, 0xAF	; 175
     a7c:	38 f4       	brcc	.+14     	; 0xa8c <pow+0x70>
     a7e:	9f 77       	andi	r25, 0x7F	; 127
     a80:	9f 93       	push	r25
     a82:	0d d0       	rcall	.+26     	; 0xa9e <pow+0x82>
     a84:	0f 90       	pop	r0
     a86:	07 fc       	sbrc	r0, 7
     a88:	90 58       	subi	r25, 0x80	; 128
     a8a:	08 95       	ret
     a8c:	46 f0       	brts	.+16     	; 0xa9e <pow+0x82>
     a8e:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_nan>
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	80 e8       	ldi	r24, 0x80	; 128
     a98:	9f e3       	ldi	r25, 0x3F	; 63
     a9a:	08 95       	ret
     a9c:	4f e7       	ldi	r20, 0x7F	; 127
     a9e:	9f 77       	andi	r25, 0x7F	; 127
     aa0:	5f 93       	push	r21
     aa2:	4f 93       	push	r20
     aa4:	3f 93       	push	r19
     aa6:	2f 93       	push	r18
     aa8:	0e 94 2d 06 	call	0xc5a	; 0xc5a <log>
     aac:	2f 91       	pop	r18
     aae:	3f 91       	pop	r19
     ab0:	4f 91       	pop	r20
     ab2:	5f 91       	pop	r21
     ab4:	0e 94 a1 04 	call	0x942	; 0x942 <__mulsf3>
     ab8:	0c 94 66 05 	jmp	0xacc	; 0xacc <exp>
     abc:	29 f4       	brne	.+10     	; 0xac8 <pow+0xac>
     abe:	16 f0       	brts	.+4      	; 0xac4 <pow+0xa8>
     ac0:	0c 94 4b 04 	jmp	0x896	; 0x896 <__fp_inf>
     ac4:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_zero>
     ac8:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_nan>

00000acc <exp>:
     acc:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fp_splitA>
     ad0:	a8 f3       	brcs	.-22     	; 0xabc <pow+0xa0>
     ad2:	96 38       	cpi	r25, 0x86	; 134
     ad4:	a0 f7       	brcc	.-24     	; 0xabe <pow+0xa2>
     ad6:	07 f8       	bld	r0, 7
     ad8:	0f 92       	push	r0
     ada:	e8 94       	clt
     adc:	2b e3       	ldi	r18, 0x3B	; 59
     ade:	3a ea       	ldi	r19, 0xAA	; 170
     ae0:	48 eb       	ldi	r20, 0xB8	; 184
     ae2:	5f e7       	ldi	r21, 0x7F	; 127
     ae4:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3_pse>
     ae8:	0f 92       	push	r0
     aea:	0f 92       	push	r0
     aec:	0f 92       	push	r0
     aee:	4d b7       	in	r20, 0x3d	; 61
     af0:	5e b7       	in	r21, 0x3e	; 62
     af2:	0f 92       	push	r0
     af4:	0e 94 75 06 	call	0xcea	; 0xcea <modf>
     af8:	e8 e6       	ldi	r30, 0x68	; 104
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_powser>
     b00:	4f 91       	pop	r20
     b02:	5f 91       	pop	r21
     b04:	ef 91       	pop	r30
     b06:	ff 91       	pop	r31
     b08:	e5 95       	asr	r30
     b0a:	ee 1f       	adc	r30, r30
     b0c:	ff 1f       	adc	r31, r31
     b0e:	49 f0       	breq	.+18     	; 0xb22 <exp+0x56>
     b10:	fe 57       	subi	r31, 0x7E	; 126
     b12:	e0 68       	ori	r30, 0x80	; 128
     b14:	44 27       	eor	r20, r20
     b16:	ee 0f       	add	r30, r30
     b18:	44 1f       	adc	r20, r20
     b1a:	fa 95       	dec	r31
     b1c:	e1 f7       	brne	.-8      	; 0xb16 <exp+0x4a>
     b1e:	41 95       	neg	r20
     b20:	55 0b       	sbc	r21, r21
     b22:	0e 94 ef 05 	call	0xbde	; 0xbde <ldexp>
     b26:	0f 90       	pop	r0
     b28:	07 fe       	sbrs	r0, 7
     b2a:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <inverse>
     b2e:	08 95       	ret

00000b30 <__fp_cmp>:
     b30:	99 0f       	add	r25, r25
     b32:	00 08       	sbc	r0, r0
     b34:	55 0f       	add	r21, r21
     b36:	aa 0b       	sbc	r26, r26
     b38:	e0 e8       	ldi	r30, 0x80	; 128
     b3a:	fe ef       	ldi	r31, 0xFE	; 254
     b3c:	16 16       	cp	r1, r22
     b3e:	17 06       	cpc	r1, r23
     b40:	e8 07       	cpc	r30, r24
     b42:	f9 07       	cpc	r31, r25
     b44:	c0 f0       	brcs	.+48     	; 0xb76 <__fp_cmp+0x46>
     b46:	12 16       	cp	r1, r18
     b48:	13 06       	cpc	r1, r19
     b4a:	e4 07       	cpc	r30, r20
     b4c:	f5 07       	cpc	r31, r21
     b4e:	98 f0       	brcs	.+38     	; 0xb76 <__fp_cmp+0x46>
     b50:	62 1b       	sub	r22, r18
     b52:	73 0b       	sbc	r23, r19
     b54:	84 0b       	sbc	r24, r20
     b56:	95 0b       	sbc	r25, r21
     b58:	39 f4       	brne	.+14     	; 0xb68 <__fp_cmp+0x38>
     b5a:	0a 26       	eor	r0, r26
     b5c:	61 f0       	breq	.+24     	; 0xb76 <__fp_cmp+0x46>
     b5e:	23 2b       	or	r18, r19
     b60:	24 2b       	or	r18, r20
     b62:	25 2b       	or	r18, r21
     b64:	21 f4       	brne	.+8      	; 0xb6e <__fp_cmp+0x3e>
     b66:	08 95       	ret
     b68:	0a 26       	eor	r0, r26
     b6a:	09 f4       	brne	.+2      	; 0xb6e <__fp_cmp+0x3e>
     b6c:	a1 40       	sbci	r26, 0x01	; 1
     b6e:	a6 95       	lsr	r26
     b70:	8f ef       	ldi	r24, 0xFF	; 255
     b72:	81 1d       	adc	r24, r1
     b74:	81 1d       	adc	r24, r1
     b76:	08 95       	ret

00000b78 <__fp_powser>:
     b78:	df 93       	push	r29
     b7a:	cf 93       	push	r28
     b7c:	1f 93       	push	r17
     b7e:	0f 93       	push	r16
     b80:	ff 92       	push	r15
     b82:	ef 92       	push	r14
     b84:	df 92       	push	r13
     b86:	7b 01       	movw	r14, r22
     b88:	8c 01       	movw	r16, r24
     b8a:	68 94       	set
     b8c:	06 c0       	rjmp	.+12     	; 0xb9a <__fp_powser+0x22>
     b8e:	da 2e       	mov	r13, r26
     b90:	ef 01       	movw	r28, r30
     b92:	0e 94 b4 04 	call	0x968	; 0x968 <__mulsf3x>
     b96:	fe 01       	movw	r30, r28
     b98:	e8 94       	clt
     b9a:	a5 91       	lpm	r26, Z+
     b9c:	25 91       	lpm	r18, Z+
     b9e:	35 91       	lpm	r19, Z+
     ba0:	45 91       	lpm	r20, Z+
     ba2:	55 91       	lpm	r21, Z+
     ba4:	a6 f3       	brts	.-24     	; 0xb8e <__fp_powser+0x16>
     ba6:	ef 01       	movw	r28, r30
     ba8:	0e 94 11 03 	call	0x622	; 0x622 <__addsf3x>
     bac:	fe 01       	movw	r30, r28
     bae:	97 01       	movw	r18, r14
     bb0:	a8 01       	movw	r20, r16
     bb2:	da 94       	dec	r13
     bb4:	69 f7       	brne	.-38     	; 0xb90 <__fp_powser+0x18>
     bb6:	df 90       	pop	r13
     bb8:	ef 90       	pop	r14
     bba:	ff 90       	pop	r15
     bbc:	0f 91       	pop	r16
     bbe:	1f 91       	pop	r17
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	08 95       	ret

00000bc6 <inverse>:
     bc6:	9b 01       	movw	r18, r22
     bc8:	ac 01       	movw	r20, r24
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	80 e8       	ldi	r24, 0x80	; 128
     bd0:	9f e3       	ldi	r25, 0x3F	; 63
     bd2:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__divsf3>
     bd6:	0c 94 4b 04 	jmp	0x896	; 0x896 <__fp_inf>
     bda:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__fp_mpack>

00000bde <ldexp>:
     bde:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fp_splitA>
     be2:	d8 f3       	brcs	.-10     	; 0xbda <inverse+0x14>
     be4:	99 23       	and	r25, r25
     be6:	c9 f3       	breq	.-14     	; 0xbda <inverse+0x14>
     be8:	94 0f       	add	r25, r20
     bea:	51 1d       	adc	r21, r1
     bec:	a3 f3       	brvs	.-24     	; 0xbd6 <inverse+0x10>
     bee:	91 50       	subi	r25, 0x01	; 1
     bf0:	50 40       	sbci	r21, 0x00	; 0
     bf2:	94 f0       	brlt	.+36     	; 0xc18 <ldexp+0x3a>
     bf4:	59 f0       	breq	.+22     	; 0xc0c <ldexp+0x2e>
     bf6:	88 23       	and	r24, r24
     bf8:	32 f0       	brmi	.+12     	; 0xc06 <ldexp+0x28>
     bfa:	66 0f       	add	r22, r22
     bfc:	77 1f       	adc	r23, r23
     bfe:	88 1f       	adc	r24, r24
     c00:	91 50       	subi	r25, 0x01	; 1
     c02:	50 40       	sbci	r21, 0x00	; 0
     c04:	c1 f7       	brne	.-16     	; 0xbf6 <ldexp+0x18>
     c06:	9e 3f       	cpi	r25, 0xFE	; 254
     c08:	51 05       	cpc	r21, r1
     c0a:	2c f7       	brge	.-54     	; 0xbd6 <inverse+0x10>
     c0c:	88 0f       	add	r24, r24
     c0e:	91 1d       	adc	r25, r1
     c10:	96 95       	lsr	r25
     c12:	87 95       	ror	r24
     c14:	97 f9       	bld	r25, 7
     c16:	08 95       	ret
     c18:	5f 3f       	cpi	r21, 0xFF	; 255
     c1a:	ac f0       	brlt	.+42     	; 0xc46 <ldexp+0x68>
     c1c:	98 3e       	cpi	r25, 0xE8	; 232
     c1e:	9c f0       	brlt	.+38     	; 0xc46 <ldexp+0x68>
     c20:	bb 27       	eor	r27, r27
     c22:	86 95       	lsr	r24
     c24:	77 95       	ror	r23
     c26:	67 95       	ror	r22
     c28:	b7 95       	ror	r27
     c2a:	08 f4       	brcc	.+2      	; 0xc2e <ldexp+0x50>
     c2c:	b1 60       	ori	r27, 0x01	; 1
     c2e:	93 95       	inc	r25
     c30:	c1 f7       	brne	.-16     	; 0xc22 <ldexp+0x44>
     c32:	bb 0f       	add	r27, r27
     c34:	58 f7       	brcc	.-42     	; 0xc0c <ldexp+0x2e>
     c36:	11 f4       	brne	.+4      	; 0xc3c <ldexp+0x5e>
     c38:	60 ff       	sbrs	r22, 0
     c3a:	e8 cf       	rjmp	.-48     	; 0xc0c <ldexp+0x2e>
     c3c:	6f 5f       	subi	r22, 0xFF	; 255
     c3e:	7f 4f       	sbci	r23, 0xFF	; 255
     c40:	8f 4f       	sbci	r24, 0xFF	; 255
     c42:	9f 4f       	sbci	r25, 0xFF	; 255
     c44:	e3 cf       	rjmp	.-58     	; 0xc0c <ldexp+0x2e>
     c46:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_szero>
     c4a:	16 f0       	brts	.+4      	; 0xc50 <ldexp+0x72>
     c4c:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__fp_mpack>
     c50:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_nan>
     c54:	68 94       	set
     c56:	0c 94 4b 04 	jmp	0x896	; 0x896 <__fp_inf>

00000c5a <log>:
     c5a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fp_splitA>
     c5e:	a8 f3       	brcs	.-22     	; 0xc4a <ldexp+0x6c>
     c60:	99 23       	and	r25, r25
     c62:	c1 f3       	breq	.-16     	; 0xc54 <ldexp+0x76>
     c64:	ae f3       	brts	.-22     	; 0xc50 <ldexp+0x72>
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	1f 93       	push	r17
     c6c:	0f 93       	push	r16
     c6e:	ff 92       	push	r15
     c70:	c9 2f       	mov	r28, r25
     c72:	dd 27       	eor	r29, r29
     c74:	88 23       	and	r24, r24
     c76:	2a f0       	brmi	.+10     	; 0xc82 <log+0x28>
     c78:	21 97       	sbiw	r28, 0x01	; 1
     c7a:	66 0f       	add	r22, r22
     c7c:	77 1f       	adc	r23, r23
     c7e:	88 1f       	adc	r24, r24
     c80:	da f7       	brpl	.-10     	; 0xc78 <log+0x1e>
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	40 e8       	ldi	r20, 0x80	; 128
     c88:	5f eb       	ldi	r21, 0xBF	; 191
     c8a:	9f e3       	ldi	r25, 0x3F	; 63
     c8c:	88 39       	cpi	r24, 0x98	; 152
     c8e:	20 f0       	brcs	.+8      	; 0xc98 <log+0x3e>
     c90:	80 3e       	cpi	r24, 0xE0	; 224
     c92:	38 f0       	brcs	.+14     	; 0xca2 <log+0x48>
     c94:	21 96       	adiw	r28, 0x01	; 1
     c96:	8f 77       	andi	r24, 0x7F	; 127
     c98:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__addsf3>
     c9c:	e0 e9       	ldi	r30, 0x90	; 144
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	04 c0       	rjmp	.+8      	; 0xcaa <log+0x50>
     ca2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__addsf3>
     ca6:	ed eb       	ldi	r30, 0xBD	; 189
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_powser>
     cae:	8b 01       	movw	r16, r22
     cb0:	be 01       	movw	r22, r28
     cb2:	ec 01       	movw	r28, r24
     cb4:	fb 2e       	mov	r15, r27
     cb6:	6f 57       	subi	r22, 0x7F	; 127
     cb8:	71 09       	sbc	r23, r1
     cba:	75 95       	asr	r23
     cbc:	77 1f       	adc	r23, r23
     cbe:	88 0b       	sbc	r24, r24
     cc0:	99 0b       	sbc	r25, r25
     cc2:	0e 94 10 04 	call	0x820	; 0x820 <__floatsisf>
     cc6:	28 e1       	ldi	r18, 0x18	; 24
     cc8:	32 e7       	ldi	r19, 0x72	; 114
     cca:	41 e3       	ldi	r20, 0x31	; 49
     ccc:	5f e3       	ldi	r21, 0x3F	; 63
     cce:	0e 94 b4 04 	call	0x968	; 0x968 <__mulsf3x>
     cd2:	af 2d       	mov	r26, r15
     cd4:	98 01       	movw	r18, r16
     cd6:	ae 01       	movw	r20, r28
     cd8:	ff 90       	pop	r15
     cda:	0f 91       	pop	r16
     cdc:	1f 91       	pop	r17
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	0e 94 11 03 	call	0x622	; 0x622 <__addsf3x>
     ce6:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__fp_round>

00000cea <modf>:
     cea:	fa 01       	movw	r30, r20
     cec:	dc 01       	movw	r26, r24
     cee:	aa 0f       	add	r26, r26
     cf0:	bb 1f       	adc	r27, r27
     cf2:	9b 01       	movw	r18, r22
     cf4:	ac 01       	movw	r20, r24
     cf6:	bf 57       	subi	r27, 0x7F	; 127
     cf8:	28 f4       	brcc	.+10     	; 0xd04 <modf+0x1a>
     cfa:	22 27       	eor	r18, r18
     cfc:	33 27       	eor	r19, r19
     cfe:	44 27       	eor	r20, r20
     d00:	50 78       	andi	r21, 0x80	; 128
     d02:	20 c0       	rjmp	.+64     	; 0xd44 <modf+0x5a>
     d04:	b7 51       	subi	r27, 0x17	; 23
     d06:	90 f4       	brcc	.+36     	; 0xd2c <modf+0x42>
     d08:	ab 2f       	mov	r26, r27
     d0a:	00 24       	eor	r0, r0
     d0c:	46 95       	lsr	r20
     d0e:	37 95       	ror	r19
     d10:	27 95       	ror	r18
     d12:	01 1c       	adc	r0, r1
     d14:	a3 95       	inc	r26
     d16:	d2 f3       	brmi	.-12     	; 0xd0c <modf+0x22>
     d18:	00 20       	and	r0, r0
     d1a:	71 f0       	breq	.+28     	; 0xd38 <modf+0x4e>
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	44 1f       	adc	r20, r20
     d22:	b3 95       	inc	r27
     d24:	da f3       	brmi	.-10     	; 0xd1c <modf+0x32>
     d26:	0e d0       	rcall	.+28     	; 0xd44 <modf+0x5a>
     d28:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <__subsf3>
     d2c:	61 30       	cpi	r22, 0x01	; 1
     d2e:	71 05       	cpc	r23, r1
     d30:	a0 e8       	ldi	r26, 0x80	; 128
     d32:	8a 07       	cpc	r24, r26
     d34:	b9 46       	sbci	r27, 0x69	; 105
     d36:	30 f4       	brcc	.+12     	; 0xd44 <modf+0x5a>
     d38:	9b 01       	movw	r18, r22
     d3a:	ac 01       	movw	r20, r24
     d3c:	66 27       	eor	r22, r22
     d3e:	77 27       	eor	r23, r23
     d40:	88 27       	eor	r24, r24
     d42:	90 78       	andi	r25, 0x80	; 128
     d44:	30 96       	adiw	r30, 0x00	; 0
     d46:	21 f0       	breq	.+8      	; 0xd50 <modf+0x66>
     d48:	20 83       	st	Z, r18
     d4a:	31 83       	std	Z+1, r19	; 0x01
     d4c:	42 83       	std	Z+2, r20	; 0x02
     d4e:	53 83       	std	Z+3, r21	; 0x03
     d50:	08 95       	ret

00000d52 <__fp_mpack>:
     d52:	9f 3f       	cpi	r25, 0xFF	; 255
     d54:	31 f0       	breq	.+12     	; 0xd62 <__fp_mpack_finite+0xc>

00000d56 <__fp_mpack_finite>:
     d56:	91 50       	subi	r25, 0x01	; 1
     d58:	20 f4       	brcc	.+8      	; 0xd62 <__fp_mpack_finite+0xc>
     d5a:	87 95       	ror	r24
     d5c:	77 95       	ror	r23
     d5e:	67 95       	ror	r22
     d60:	b7 95       	ror	r27
     d62:	88 0f       	add	r24, r24
     d64:	91 1d       	adc	r25, r1
     d66:	96 95       	lsr	r25
     d68:	87 95       	ror	r24
     d6a:	97 f9       	bld	r25, 7
     d6c:	08 95       	ret

00000d6e <__divmodhi4>:
     d6e:	97 fb       	bst	r25, 7
     d70:	07 2e       	mov	r0, r23
     d72:	16 f4       	brtc	.+4      	; 0xd78 <__divmodhi4+0xa>
     d74:	00 94       	com	r0
     d76:	07 d0       	rcall	.+14     	; 0xd86 <__divmodhi4_neg1>
     d78:	77 fd       	sbrc	r23, 7
     d7a:	09 d0       	rcall	.+18     	; 0xd8e <__divmodhi4_neg2>
     d7c:	0e 94 cb 06 	call	0xd96	; 0xd96 <__udivmodhi4>
     d80:	07 fc       	sbrc	r0, 7
     d82:	05 d0       	rcall	.+10     	; 0xd8e <__divmodhi4_neg2>
     d84:	3e f4       	brtc	.+14     	; 0xd94 <__divmodhi4_exit>

00000d86 <__divmodhi4_neg1>:
     d86:	90 95       	com	r25
     d88:	81 95       	neg	r24
     d8a:	9f 4f       	sbci	r25, 0xFF	; 255
     d8c:	08 95       	ret

00000d8e <__divmodhi4_neg2>:
     d8e:	70 95       	com	r23
     d90:	61 95       	neg	r22
     d92:	7f 4f       	sbci	r23, 0xFF	; 255

00000d94 <__divmodhi4_exit>:
     d94:	08 95       	ret

00000d96 <__udivmodhi4>:
     d96:	aa 1b       	sub	r26, r26
     d98:	bb 1b       	sub	r27, r27
     d9a:	51 e1       	ldi	r21, 0x11	; 17
     d9c:	07 c0       	rjmp	.+14     	; 0xdac <__udivmodhi4_ep>

00000d9e <__udivmodhi4_loop>:
     d9e:	aa 1f       	adc	r26, r26
     da0:	bb 1f       	adc	r27, r27
     da2:	a6 17       	cp	r26, r22
     da4:	b7 07       	cpc	r27, r23
     da6:	10 f0       	brcs	.+4      	; 0xdac <__udivmodhi4_ep>
     da8:	a6 1b       	sub	r26, r22
     daa:	b7 0b       	sbc	r27, r23

00000dac <__udivmodhi4_ep>:
     dac:	88 1f       	adc	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	5a 95       	dec	r21
     db2:	a9 f7       	brne	.-22     	; 0xd9e <__udivmodhi4_loop>
     db4:	80 95       	com	r24
     db6:	90 95       	com	r25
     db8:	bc 01       	movw	r22, r24
     dba:	cd 01       	movw	r24, r26
     dbc:	08 95       	ret

00000dbe <atof>:
     dbe:	66 27       	eor	r22, r22
     dc0:	77 27       	eor	r23, r23
     dc2:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <strtod>

00000dc6 <strtod>:
     dc6:	a0 e0       	ldi	r26, 0x00	; 0
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e9 ee       	ldi	r30, 0xE9	; 233
     dcc:	f6 e0       	ldi	r31, 0x06	; 6
     dce:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__prologue_saves__+0xc>
     dd2:	ec 01       	movw	r28, r24
     dd4:	6b 01       	movw	r12, r22
     dd6:	61 15       	cp	r22, r1
     dd8:	71 05       	cpc	r23, r1
     dda:	19 f0       	breq	.+6      	; 0xde2 <strtod+0x1c>
     ddc:	fb 01       	movw	r30, r22
     dde:	91 83       	std	Z+1, r25	; 0x01
     de0:	80 83       	st	Z, r24
     de2:	7e 01       	movw	r14, r28
     de4:	ff ef       	ldi	r31, 0xFF	; 255
     de6:	ef 1a       	sub	r14, r31
     de8:	ff 0a       	sbc	r15, r31
     dea:	08 81       	ld	r16, Y
     dec:	80 2f       	mov	r24, r16
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 31 08 	call	0x1062	; 0x1062 <isspace>
     df4:	89 2b       	or	r24, r25
     df6:	11 f0       	breq	.+4      	; 0xdfc <strtod+0x36>
     df8:	e7 01       	movw	r28, r14
     dfa:	f3 cf       	rjmp	.-26     	; 0xde2 <strtod+0x1c>
     dfc:	0d 32       	cpi	r16, 0x2D	; 45
     dfe:	39 f4       	brne	.+14     	; 0xe0e <strtod+0x48>
     e00:	7e 01       	movw	r14, r28
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	e8 0e       	add	r14, r24
     e06:	f1 1c       	adc	r15, r1
     e08:	09 81       	ldd	r16, Y+1	; 0x01
     e0a:	11 e0       	ldi	r17, 0x01	; 1
     e0c:	08 c0       	rjmp	.+16     	; 0xe1e <strtod+0x58>
     e0e:	0b 32       	cpi	r16, 0x2B	; 43
     e10:	29 f4       	brne	.+10     	; 0xe1c <strtod+0x56>
     e12:	7e 01       	movw	r14, r28
     e14:	92 e0       	ldi	r25, 0x02	; 2
     e16:	e9 0e       	add	r14, r25
     e18:	f1 1c       	adc	r15, r1
     e1a:	09 81       	ldd	r16, Y+1	; 0x01
     e1c:	10 e0       	ldi	r17, 0x00	; 0
     e1e:	e7 01       	movw	r28, r14
     e20:	21 97       	sbiw	r28, 0x01	; 1
     e22:	43 e0       	ldi	r20, 0x03	; 3
     e24:	50 e0       	ldi	r21, 0x00	; 0
     e26:	62 ef       	ldi	r22, 0xF2	; 242
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	ce 01       	movw	r24, r28
     e2c:	0e 94 3a 08 	call	0x1074	; 0x1074 <strncasecmp_P>
     e30:	89 2b       	or	r24, r25
     e32:	c1 f4       	brne	.+48     	; 0xe64 <strtod+0x9e>
     e34:	23 96       	adiw	r28, 0x03	; 3
     e36:	45 e0       	ldi	r20, 0x05	; 5
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	6d ee       	ldi	r22, 0xED	; 237
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	ce 01       	movw	r24, r28
     e40:	0e 94 3a 08 	call	0x1074	; 0x1074 <strncasecmp_P>
     e44:	89 2b       	or	r24, r25
     e46:	09 f4       	brne	.+2      	; 0xe4a <strtod+0x84>
     e48:	25 96       	adiw	r28, 0x05	; 5
     e4a:	c1 14       	cp	r12, r1
     e4c:	d1 04       	cpc	r13, r1
     e4e:	19 f0       	breq	.+6      	; 0xe56 <strtod+0x90>
     e50:	f6 01       	movw	r30, r12
     e52:	d1 83       	std	Z+1, r29	; 0x01
     e54:	c0 83       	st	Z, r28
     e56:	11 11       	cpse	r17, r1
     e58:	f6 c0       	rjmp	.+492    	; 0x1046 <strtod+0x280>
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	80 e8       	ldi	r24, 0x80	; 128
     e60:	9f e7       	ldi	r25, 0x7F	; 127
     e62:	fa c0       	rjmp	.+500    	; 0x1058 <strtod+0x292>
     e64:	43 e0       	ldi	r20, 0x03	; 3
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	6a ee       	ldi	r22, 0xEA	; 234
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	ce 01       	movw	r24, r28
     e6e:	0e 94 3a 08 	call	0x1074	; 0x1074 <strncasecmp_P>
     e72:	89 2b       	or	r24, r25
     e74:	59 f4       	brne	.+22     	; 0xe8c <strtod+0xc6>
     e76:	c1 14       	cp	r12, r1
     e78:	d1 04       	cpc	r13, r1
     e7a:	09 f4       	brne	.+2      	; 0xe7e <strtod+0xb8>
     e7c:	e9 c0       	rjmp	.+466    	; 0x1050 <strtod+0x28a>
     e7e:	f2 e0       	ldi	r31, 0x02	; 2
     e80:	ef 0e       	add	r14, r31
     e82:	f1 1c       	adc	r15, r1
     e84:	f6 01       	movw	r30, r12
     e86:	f1 82       	std	Z+1, r15	; 0x01
     e88:	e0 82       	st	Z, r14
     e8a:	e2 c0       	rjmp	.+452    	; 0x1050 <strtod+0x28a>
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	a9 01       	movw	r20, r18
     e92:	c0 e0       	ldi	r28, 0x00	; 0
     e94:	d0 e0       	ldi	r29, 0x00	; 0
     e96:	f7 01       	movw	r30, r14
     e98:	80 ed       	ldi	r24, 0xD0	; 208
     e9a:	a8 2e       	mov	r10, r24
     e9c:	a0 0e       	add	r10, r16
     e9e:	89 e0       	ldi	r24, 0x09	; 9
     ea0:	8a 15       	cp	r24, r10
     ea2:	30 f1       	brcs	.+76     	; 0xef0 <strtod+0x12a>
     ea4:	91 2f       	mov	r25, r17
     ea6:	92 60       	ori	r25, 0x02	; 2
     ea8:	b9 2e       	mov	r11, r25
     eaa:	81 2f       	mov	r24, r17
     eac:	88 70       	andi	r24, 0x08	; 8
     eae:	12 ff       	sbrs	r17, 2
     eb0:	04 c0       	rjmp	.+8      	; 0xeba <strtod+0xf4>
     eb2:	81 11       	cpse	r24, r1
     eb4:	24 c0       	rjmp	.+72     	; 0xefe <strtod+0x138>
     eb6:	21 96       	adiw	r28, 0x01	; 1
     eb8:	22 c0       	rjmp	.+68     	; 0xefe <strtod+0x138>
     eba:	81 11       	cpse	r24, r1
     ebc:	21 97       	sbiw	r28, 0x01	; 1
     ebe:	a5 e0       	ldi	r26, 0x05	; 5
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__muluhisi3>
     ec6:	dc 01       	movw	r26, r24
     ec8:	cb 01       	movw	r24, r22
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	aa 1f       	adc	r26, r26
     ed0:	bb 1f       	adc	r27, r27
     ed2:	9c 01       	movw	r18, r24
     ed4:	ad 01       	movw	r20, r26
     ed6:	2a 0d       	add	r18, r10
     ed8:	31 1d       	adc	r19, r1
     eda:	41 1d       	adc	r20, r1
     edc:	51 1d       	adc	r21, r1
     ede:	28 39       	cpi	r18, 0x98	; 152
     ee0:	89 e9       	ldi	r24, 0x99	; 153
     ee2:	38 07       	cpc	r19, r24
     ee4:	48 07       	cpc	r20, r24
     ee6:	89 e1       	ldi	r24, 0x19	; 25
     ee8:	58 07       	cpc	r21, r24
     eea:	48 f0       	brcs	.+18     	; 0xefe <strtod+0x138>
     eec:	16 60       	ori	r17, 0x06	; 6
     eee:	06 c0       	rjmp	.+12     	; 0xefc <strtod+0x136>
     ef0:	9e ef       	ldi	r25, 0xFE	; 254
     ef2:	a9 12       	cpse	r10, r25
     ef4:	0a c0       	rjmp	.+20     	; 0xf0a <strtod+0x144>
     ef6:	13 fd       	sbrc	r17, 3
     ef8:	40 c0       	rjmp	.+128    	; 0xf7a <strtod+0x1b4>
     efa:	18 60       	ori	r17, 0x08	; 8
     efc:	b1 2e       	mov	r11, r17
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	e8 1a       	sub	r14, r24
     f02:	f8 0a       	sbc	r15, r24
     f04:	00 81       	ld	r16, Z
     f06:	1b 2d       	mov	r17, r11
     f08:	c6 cf       	rjmp	.-116    	; 0xe96 <strtod+0xd0>
     f0a:	80 2f       	mov	r24, r16
     f0c:	8f 7d       	andi	r24, 0xDF	; 223
     f0e:	85 34       	cpi	r24, 0x45	; 69
     f10:	a1 f5       	brne	.+104    	; 0xf7a <strtod+0x1b4>
     f12:	80 81       	ld	r24, Z
     f14:	8d 32       	cpi	r24, 0x2D	; 45
     f16:	11 f4       	brne	.+4      	; 0xf1c <strtod+0x156>
     f18:	10 61       	ori	r17, 0x10	; 16
     f1a:	06 c0       	rjmp	.+12     	; 0xf28 <strtod+0x162>
     f1c:	8b 32       	cpi	r24, 0x2B	; 43
     f1e:	21 f0       	breq	.+8      	; 0xf28 <strtod+0x162>
     f20:	31 96       	adiw	r30, 0x01	; 1
     f22:	61 e0       	ldi	r22, 0x01	; 1
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	04 c0       	rjmp	.+8      	; 0xf30 <strtod+0x16a>
     f28:	81 81       	ldd	r24, Z+1	; 0x01
     f2a:	32 96       	adiw	r30, 0x02	; 2
     f2c:	62 e0       	ldi	r22, 0x02	; 2
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	80 53       	subi	r24, 0x30	; 48
     f32:	8a 30       	cpi	r24, 0x0A	; 10
     f34:	18 f0       	brcs	.+6      	; 0xf3c <strtod+0x176>
     f36:	e6 1b       	sub	r30, r22
     f38:	f7 0b       	sbc	r31, r23
     f3a:	1f c0       	rjmp	.+62     	; 0xf7a <strtod+0x1b4>
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	60 38       	cpi	r22, 0x80	; 128
     f42:	9c e0       	ldi	r25, 0x0C	; 12
     f44:	79 07       	cpc	r23, r25
     f46:	5c f4       	brge	.+22     	; 0xf5e <strtod+0x198>
     f48:	db 01       	movw	r26, r22
     f4a:	aa 0f       	add	r26, r26
     f4c:	bb 1f       	adc	r27, r27
     f4e:	aa 0f       	add	r26, r26
     f50:	bb 1f       	adc	r27, r27
     f52:	6a 0f       	add	r22, r26
     f54:	7b 1f       	adc	r23, r27
     f56:	66 0f       	add	r22, r22
     f58:	77 1f       	adc	r23, r23
     f5a:	68 0f       	add	r22, r24
     f5c:	71 1d       	adc	r23, r1
     f5e:	31 96       	adiw	r30, 0x01	; 1
     f60:	df 01       	movw	r26, r30
     f62:	11 97       	sbiw	r26, 0x01	; 1
     f64:	8c 91       	ld	r24, X
     f66:	80 53       	subi	r24, 0x30	; 48
     f68:	8a 30       	cpi	r24, 0x0A	; 10
     f6a:	50 f3       	brcs	.-44     	; 0xf40 <strtod+0x17a>
     f6c:	14 ff       	sbrs	r17, 4
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <strtod+0x1b0>
     f70:	71 95       	neg	r23
     f72:	61 95       	neg	r22
     f74:	71 09       	sbc	r23, r1
     f76:	c6 0f       	add	r28, r22
     f78:	d7 1f       	adc	r29, r23
     f7a:	11 ff       	sbrs	r17, 1
     f7c:	08 c0       	rjmp	.+16     	; 0xf8e <strtod+0x1c8>
     f7e:	c1 14       	cp	r12, r1
     f80:	d1 04       	cpc	r13, r1
     f82:	29 f0       	breq	.+10     	; 0xf8e <strtod+0x1c8>
     f84:	cf 01       	movw	r24, r30
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	f6 01       	movw	r30, r12
     f8a:	91 83       	std	Z+1, r25	; 0x01
     f8c:	80 83       	st	Z, r24
     f8e:	ca 01       	movw	r24, r20
     f90:	b9 01       	movw	r22, r18
     f92:	0e 94 0e 04 	call	0x81c	; 0x81c <__floatunsisf>
     f96:	21 2f       	mov	r18, r17
     f98:	23 70       	andi	r18, 0x03	; 3
     f9a:	23 30       	cpi	r18, 0x03	; 3
     f9c:	19 f0       	breq	.+6      	; 0xfa4 <strtod+0x1de>
     f9e:	4b 01       	movw	r8, r22
     fa0:	5c 01       	movw	r10, r24
     fa2:	06 c0       	rjmp	.+12     	; 0xfb0 <strtod+0x1ea>
     fa4:	4b 01       	movw	r8, r22
     fa6:	5c 01       	movw	r10, r24
     fa8:	b7 fa       	bst	r11, 7
     faa:	b0 94       	com	r11
     fac:	b7 f8       	bld	r11, 7
     fae:	b0 94       	com	r11
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	a9 01       	movw	r20, r18
     fb6:	c5 01       	movw	r24, r10
     fb8:	b4 01       	movw	r22, r8
     fba:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__cmpsf2>
     fbe:	88 23       	and	r24, r24
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <strtod+0x1fe>
     fc2:	3e c0       	rjmp	.+124    	; 0x1040 <strtod+0x27a>
     fc4:	d7 ff       	sbrs	r29, 7
     fc6:	06 c0       	rjmp	.+12     	; 0xfd4 <strtod+0x20e>
     fc8:	d1 95       	neg	r29
     fca:	c1 95       	neg	r28
     fcc:	d1 09       	sbc	r29, r1
     fce:	09 e0       	ldi	r16, 0x09	; 9
     fd0:	11 e0       	ldi	r17, 0x01	; 1
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <strtod+0x212>
     fd4:	01 e2       	ldi	r16, 0x21	; 33
     fd6:	11 e0       	ldi	r17, 0x01	; 1
     fd8:	68 01       	movw	r12, r16
     fda:	f8 e1       	ldi	r31, 0x18	; 24
     fdc:	cf 1a       	sub	r12, r31
     fde:	d1 08       	sbc	r13, r1
     fe0:	90 e2       	ldi	r25, 0x20	; 32
     fe2:	e9 2e       	mov	r14, r25
     fe4:	f1 2c       	mov	r15, r1
     fe6:	ce 15       	cp	r28, r14
     fe8:	df 05       	cpc	r29, r15
     fea:	74 f0       	brlt	.+28     	; 0x1008 <strtod+0x242>
     fec:	f8 01       	movw	r30, r16
     fee:	25 91       	lpm	r18, Z+
     ff0:	35 91       	lpm	r19, Z+
     ff2:	45 91       	lpm	r20, Z+
     ff4:	54 91       	lpm	r21, Z
     ff6:	c5 01       	movw	r24, r10
     ff8:	b4 01       	movw	r22, r8
     ffa:	0e 94 a1 04 	call	0x942	; 0x942 <__mulsf3>
     ffe:	4b 01       	movw	r8, r22
    1000:	5c 01       	movw	r10, r24
    1002:	ce 19       	sub	r28, r14
    1004:	df 09       	sbc	r29, r15
    1006:	ef cf       	rjmp	.-34     	; 0xfe6 <strtod+0x220>
    1008:	04 50       	subi	r16, 0x04	; 4
    100a:	11 09       	sbc	r17, r1
    100c:	f5 94       	asr	r15
    100e:	e7 94       	ror	r14
    1010:	0c 15       	cp	r16, r12
    1012:	1d 05       	cpc	r17, r13
    1014:	41 f7       	brne	.-48     	; 0xfe6 <strtod+0x220>
    1016:	8a 2d       	mov	r24, r10
    1018:	88 0f       	add	r24, r24
    101a:	8b 2d       	mov	r24, r11
    101c:	88 1f       	adc	r24, r24
    101e:	8f 3f       	cpi	r24, 0xFF	; 255
    1020:	49 f0       	breq	.+18     	; 0x1034 <strtod+0x26e>
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	a9 01       	movw	r20, r18
    1028:	c5 01       	movw	r24, r10
    102a:	b4 01       	movw	r22, r8
    102c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__cmpsf2>
    1030:	81 11       	cpse	r24, r1
    1032:	06 c0       	rjmp	.+12     	; 0x1040 <strtod+0x27a>
    1034:	82 e2       	ldi	r24, 0x22	; 34
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <errno+0x1>
    103c:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <errno>
    1040:	c5 01       	movw	r24, r10
    1042:	b4 01       	movw	r22, r8
    1044:	09 c0       	rjmp	.+18     	; 0x1058 <strtod+0x292>
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	80 e8       	ldi	r24, 0x80	; 128
    104c:	9f ef       	ldi	r25, 0xFF	; 255
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <strtod+0x292>
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	80 ec       	ldi	r24, 0xC0	; 192
    1056:	9f e7       	ldi	r25, 0x7F	; 127
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	ec e0       	ldi	r30, 0x0C	; 12
    105e:	0c 94 87 08 	jmp	0x110e	; 0x110e <__epilogue_restores__+0xc>

00001062 <isspace>:
    1062:	91 11       	cpse	r25, r1
    1064:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__ctype_isfalse>
    1068:	80 32       	cpi	r24, 0x20	; 32
    106a:	19 f0       	breq	.+6      	; 0x1072 <isspace+0x10>
    106c:	89 50       	subi	r24, 0x09	; 9
    106e:	85 50       	subi	r24, 0x05	; 5
    1070:	c8 f7       	brcc	.-14     	; 0x1064 <isspace+0x2>
    1072:	08 95       	ret

00001074 <strncasecmp_P>:
    1074:	fb 01       	movw	r30, r22
    1076:	dc 01       	movw	r26, r24
    1078:	41 50       	subi	r20, 0x01	; 1
    107a:	50 40       	sbci	r21, 0x00	; 0
    107c:	88 f0       	brcs	.+34     	; 0x10a0 <strncasecmp_P+0x2c>
    107e:	8d 91       	ld	r24, X+
    1080:	81 34       	cpi	r24, 0x41	; 65
    1082:	1c f0       	brlt	.+6      	; 0x108a <strncasecmp_P+0x16>
    1084:	8b 35       	cpi	r24, 0x5B	; 91
    1086:	0c f4       	brge	.+2      	; 0x108a <strncasecmp_P+0x16>
    1088:	80 5e       	subi	r24, 0xE0	; 224
    108a:	65 91       	lpm	r22, Z+
    108c:	61 34       	cpi	r22, 0x41	; 65
    108e:	1c f0       	brlt	.+6      	; 0x1096 <strncasecmp_P+0x22>
    1090:	6b 35       	cpi	r22, 0x5B	; 91
    1092:	0c f4       	brge	.+2      	; 0x1096 <strncasecmp_P+0x22>
    1094:	60 5e       	subi	r22, 0xE0	; 224
    1096:	86 1b       	sub	r24, r22
    1098:	61 11       	cpse	r22, r1
    109a:	71 f3       	breq	.-36     	; 0x1078 <strncasecmp_P+0x4>
    109c:	99 0b       	sbc	r25, r25
    109e:	08 95       	ret
    10a0:	88 1b       	sub	r24, r24
    10a2:	fc cf       	rjmp	.-8      	; 0x109c <strncasecmp_P+0x28>

000010a4 <__cmpsf2>:
    10a4:	0e 94 98 05 	call	0xb30	; 0xb30 <__fp_cmp>
    10a8:	08 f4       	brcc	.+2      	; 0x10ac <__cmpsf2+0x8>
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	08 95       	ret

000010ae <__ctype_isfalse>:
    10ae:	99 27       	eor	r25, r25
    10b0:	88 27       	eor	r24, r24

000010b2 <__ctype_istrue>:
    10b2:	08 95       	ret

000010b4 <__muluhisi3>:
    10b4:	0e 94 9c 08 	call	0x1138	; 0x1138 <__umulhisi3>
    10b8:	a5 9f       	mul	r26, r21
    10ba:	90 0d       	add	r25, r0
    10bc:	b4 9f       	mul	r27, r20
    10be:	90 0d       	add	r25, r0
    10c0:	a4 9f       	mul	r26, r20
    10c2:	80 0d       	add	r24, r0
    10c4:	91 1d       	adc	r25, r1
    10c6:	11 24       	eor	r1, r1
    10c8:	08 95       	ret

000010ca <__prologue_saves__>:
    10ca:	2f 92       	push	r2
    10cc:	3f 92       	push	r3
    10ce:	4f 92       	push	r4
    10d0:	5f 92       	push	r5
    10d2:	6f 92       	push	r6
    10d4:	7f 92       	push	r7
    10d6:	8f 92       	push	r8
    10d8:	9f 92       	push	r9
    10da:	af 92       	push	r10
    10dc:	bf 92       	push	r11
    10de:	cf 92       	push	r12
    10e0:	df 92       	push	r13
    10e2:	ef 92       	push	r14
    10e4:	ff 92       	push	r15
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	ca 1b       	sub	r28, r26
    10f4:	db 0b       	sbc	r29, r27
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	09 94       	ijmp

00001102 <__epilogue_restores__>:
    1102:	2a 88       	ldd	r2, Y+18	; 0x12
    1104:	39 88       	ldd	r3, Y+17	; 0x11
    1106:	48 88       	ldd	r4, Y+16	; 0x10
    1108:	5f 84       	ldd	r5, Y+15	; 0x0f
    110a:	6e 84       	ldd	r6, Y+14	; 0x0e
    110c:	7d 84       	ldd	r7, Y+13	; 0x0d
    110e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1110:	9b 84       	ldd	r9, Y+11	; 0x0b
    1112:	aa 84       	ldd	r10, Y+10	; 0x0a
    1114:	b9 84       	ldd	r11, Y+9	; 0x09
    1116:	c8 84       	ldd	r12, Y+8	; 0x08
    1118:	df 80       	ldd	r13, Y+7	; 0x07
    111a:	ee 80       	ldd	r14, Y+6	; 0x06
    111c:	fd 80       	ldd	r15, Y+5	; 0x05
    111e:	0c 81       	ldd	r16, Y+4	; 0x04
    1120:	1b 81       	ldd	r17, Y+3	; 0x03
    1122:	aa 81       	ldd	r26, Y+2	; 0x02
    1124:	b9 81       	ldd	r27, Y+1	; 0x01
    1126:	ce 0f       	add	r28, r30
    1128:	d1 1d       	adc	r29, r1
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	ed 01       	movw	r28, r26
    1136:	08 95       	ret

00001138 <__umulhisi3>:
    1138:	a2 9f       	mul	r26, r18
    113a:	b0 01       	movw	r22, r0
    113c:	b3 9f       	mul	r27, r19
    113e:	c0 01       	movw	r24, r0
    1140:	a3 9f       	mul	r26, r19
    1142:	70 0d       	add	r23, r0
    1144:	81 1d       	adc	r24, r1
    1146:	11 24       	eor	r1, r1
    1148:	91 1d       	adc	r25, r1
    114a:	b2 9f       	mul	r27, r18
    114c:	70 0d       	add	r23, r0
    114e:	81 1d       	adc	r24, r1
    1150:	11 24       	eor	r1, r1
    1152:	91 1d       	adc	r25, r1
    1154:	08 95       	ret

00001156 <_exit>:
    1156:	f8 94       	cli

00001158 <__stop_program>:
    1158:	ff cf       	rjmp	.-2      	; 0x1158 <__stop_program>
